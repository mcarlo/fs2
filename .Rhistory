# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix + upsetDiagMatrix)[, j - 1]), j]
}
strategies <<- strategies
selectRows <- 16 - (1:games) + 2
selectRows <- 17 - (1:games) + premiumPts
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRows, selectRows] + upsetDiagMatrix)[selectRows, j - 1]), j]
}
selectRows <- (1:games) + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRows, selectRows] + upsetDiagMatrix)[selectRows, j - 1]), j]
}
dogs[j-1]
selectRows <- (1:games) + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRows, selectRows] + upsetDiagMatrix[selectRows, selectRows])[ , j - 1]), j]
}
strategies <<- strategies
strategies
rm(list= ls())
playerCols = 2000
games = 16
# simulate placeholder
simRaw <- matrix(rep(0,playerCols*games), nrow = games, ncol = playerCols)
upsetDiagMatrix <- matrix(rep(0, games * games), nrow = games,
ncol = games)
diag(upsetDiagMatrix) <- rep(games, games)
upsetMatrix <- matrix(rep((games:1), games, times = games),
nrow = games, ncol = games)
diag(upsetMatrix) <- rep(0, games)
for (j in 2:games){
upsetMatrix[1:(j-1), j] <- (games - 1):
(games - j + 1)
}
set.seed(123) #as.numeric(Sys.time()))
simplayerCols <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simPicks <- simplayerCols * 0
set.seed(123)
simRand <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simOutcomes2 <- matrix(runif(32000), ncol = 2000)
simPicks <- matrix((simplayerCols < .5)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
fanIndex <- sample(1:2000, 2000, replace = T)
save.image("fansimsSkeleton.RData")
rm(list = ls())
load("fansimsSkeleton.RData")
# these objects will vary by week
#
setwd("D:/Documents/GitHub/fs2")
#weekFilename = "2014week11.csv"
#numFans = 190
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games) + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRows, selectRows] + upsetDiagMatrix[selectRows, selectRows])[ , j - 1]), j]
}
strategies <<- strategies
rm(list = ls())
load("fansimsSkeleton.RData")
setwd("D:/Documents/GitHub/fs2")
weekFilename = "2014week11.csv"
numFans = 190
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games) + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRows, selectRows] + upsetDiagMatrix[selectRows, selectRows])[ , j - 1]), j]
}
strategies <<- strategies
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw, 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[1:games,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix, simOutcomes2) +
crossprod(upsetDiagMatrix, (1 - simOutcomes2)))
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
simRanks <- apply(simRaw[selectRows], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
selectRowsPrem
selectRows
rm(list= ls())
playerCols = 2000
games = 16
# simulate placeholder
simRaw <- matrix(rep(0,playerCols*games), nrow = games, ncol = playerCols)
upsetDiagMatrix <- matrix(rep(0, games * games), nrow = games,
ncol = games)
diag(upsetDiagMatrix) <- rep(games, games)
upsetMatrix <- matrix(rep((games:1), games, times = games),
nrow = games, ncol = games)
diag(upsetMatrix) <- rep(0, games)
for (j in 2:games){
upsetMatrix[1:(j-1), j] <- (games - 1):
(games - j + 1)
}
set.seed(123) #as.numeric(Sys.time()))
simplayerCols <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simPicks <- simplayerCols * 0
set.seed(123)
simRand <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simOutcomes2 <- matrix(runif(32000), ncol = 2000)
simPicks <- matrix((simplayerCols < .5)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
fanIndex <- sample(1:2000, 2000, replace = T)
save.image("fansimsSkeleton.RData")
rm(list = ls())
load("fansimsSkeleton.RData")
setwd("D:/Documents/GitHub/fs2")
weekFilename = "2014week11.csv"
numFans = 190
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
### dependent matrices
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem], (1 - simOutcomes2)))
rm(list = ls())
load("fansimsSkeleton.RData")
setwd("D:/Documents/GitHub/fs2")
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
numFans = 190
weekFilename = "2014week11.csv"
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem], (1 - simOutcomes2)))
rm(list = ls())
load("fansimsSkeleton.RData")
setwd("D:/Documents/GitHub/fs2")
weekFilename = "2014week11.csv"
numFans = 190
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem], (1 - simOutcomes2)))
rm(list = ls())
getwd()
# Create placeholder objects to allocate memory
# rm(list= ls())
playerCols = 2000
games = 16
# simulate placeholder
simRaw <- matrix(rep(0,playerCols*games), nrow = games, ncol = playerCols)
upsetDiagMatrix <- matrix(rep(0, games * games), nrow = games,
ncol = games)
diag(upsetDiagMatrix) <- rep(games, games)
upsetMatrix <- matrix(rep((games:1), games, times = games),
nrow = games, ncol = games)
diag(upsetMatrix) <- rep(0, games)
for (j in 2:games){
upsetMatrix[1:(j-1), j] <- (games - 1):
(games - j + 1)
}
set.seed(123) #as.numeric(Sys.time()))
simplayerCols <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simPicks <- simplayerCols * 0
set.seed(123)
simRand <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simOutcomes2 <- matrix(runif(32000), ncol = 2000)
simPicks <- matrix((simplayerCols < .5)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
fanIndex <- sample(1:2000, 2000, replace = T)
save.image("fansimsSkeleton.RData")
processFile <- function(weekFilename){
rm(list = ls())
load("fansimsSkeleton.RData")
#weekFilename = "2014week11.csv"
# these objects will vary by week
#
setwd("D:/Documents/GitHub/fs2")
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
### dependent matrices
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem], (1 - simOutcomes2)))
}
cmpProc <- cmpfun(processFile)
library(compiler)
cmpProc <- cmp(processFile)
cmpProc <- cmpfun(processFile)
suppressMessages(cmpProc <- cmpfun(processFile))
suppressWarnings(suppressMessages(cmpProc <- cmpfun(processFile)))
system.time(processFile("2014weekfile.csv"))
processFile("2014weekfile.csv")
rm(list = ls())
processFile <- function(weekFilename){
#rm(list = ls())
load("fansimsSkeleton.RData")
#weekFilename = "2014week11.csv"
# these objects will vary by week
#
setwd("D:/Documents/GitHub/fs2")
weekFile <- read.csv(paste0("D:/WTP/",weekFilename), stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
### dependent matrices
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem], (1 - simOutcomes2)))
}
library(compiler)
cmpProc <- cmpfun(processFile)
system.time(processFile("2014weekfile.csv"))
getwd()
processFile <- function(weekFilename){
#rm(list = ls())
load("fansimsSkeleton.RData")
#weekFilename = "2014week11.csv"
# these objects will vary by week
#
setwd("D:/Documents/GitHub/fs2")
weekFile <- read.csv(weekFilename, stringsAsFactors = F)
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <- weekFile$FavConf
dogConf <- weekFile$DogConf
games <<- length(winProb)
premium <- 16 - games
prem <- FALSE
premiumPts <- 0 + prem * premium
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
selectRows <- (1:games)
selectRowsPrem <- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
### dependent matrices
simPicks <- matrix((simplayerCols[selectRows, ]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games,], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem], (1 - simOutcomes2)))
}
library(compiler)
cmpProc <- cmpfun(processFile)
system.time(processFile("2014week17.csv"))
system.time(cmpProc("2014week17.csv"))
