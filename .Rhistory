trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
stime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
stime
library(doParallel}
library(doParallel)
registerDoParallel(cores=3)
foreach(i=1:3) %dopar% sqrt(i)
ptime
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
stime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
stime
getDoParWorkers()
mcoptions <- list(preschedule=FALSE, set.seed=FALSE)
foreach(i=1:3, .options.multicore=mcoptions) %dopar% sqrt(i)
options(cores=2)
getDoParWorkers()
options(cores=3)
getDoParWorkers()
registerDoParallel(4)
options(cores=2)
getDoParWorkers()
stopCluster(cl)
install.packages(c("ape", "arules", "arulesViz", "BH", "bit64", "caret", "chron", "CORElearn", "DEoptimR", "devtools", "diptest", "dplyr", "DSL", "e1071", "ElemStatLearn", "evaluate", "excel.link", "forecast", "foreign", "formatR", "Formula", "gdata", "ggthemes", "glmnet", "gplots", "gridExtra", "gtools", "highlight", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httr", "igraph", "installr", "jsonlite", "knitcitations", "knitr", "lattice", "lava", "lme4", "lmtest", "manipulate", "mapproj", "maps", "markdown", "mclust", "mime", "mnormt", "NLP", "NLPutils", "numDeriv", "openNLP", "openNLPdata", "pander", "party", "pgmm", "plotrix", "plyr", "polspline", "prettyR", "proxy", "pryr", "psych", "qdap", "qdapDictionaries", "qdapRegex", "Quandl", "R.utils", "R6", "rattle", "Rcpp", "RcppArmadillo", "RCurl", "RefManageR", "rgl", "rmarkdown", "rms", "robustbase", "ROCR", "RODBC", "roxygen2", "rpart", "RSNNS", "rstudioapi", "sandwich", "scales", "seriation", "shiny", "shinydashboard", "sjPlot", "sp", "stringdist", "stringi", "stringr", "strucchange", "testthat", "tis", "tm", "topicmodels", "tree", "treemap", "TSP", "TTR", "vcd", "XML"))
library(foreach)
foreach(i=1:10) %do% sample(c("H", "T"), 10000, replace=TRUE)
foreach(i=1:10) %dopar% sample(c("H", "T"), 10000, replace=TRUE)
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cores = 3)
options(cores)
options()
stopImplicitCluster()
sampleVec <- sample(1:16, size = 16)
sampleOutcomes <- sample(0:1, size = 160, replace = T)
crossprod(sampleVec, sampleOutcomes)
sampleOutcomes <- matrix(sample(0:1, size = 160, replace = T), nrow = 16)
crossprod(sampleVec, sampleOutcomes)
crossprod(rep(NULL, 16), sampleOutcomes)
crossprod(rep(0, 16), sampleOutcomes)
sampleMult <- sample(1:16, size = 64, replace = T)
calcPoints <- function(rankVec){
pointVec <- as.vector(t(crossprod(rankVec, simOutcomes2)))
}
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
calcPoints(sampleVec, sampleOutcomes)
calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x <-calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
sampleMult <- matrix(sample(1:16, size = 64, replace = T), nrow = 16)
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
is.matrix(sampleMult)
is.matrix(sampleVec)
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
if (is.matrix(sampleVec)) {
pointVec <- as.matrix(t(crossprod(rankVec, outcomeMatrix)), nrow = dim(rankVec)[1])
}
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
if (is.matrix(sampleVec)) {
pointVec <- matrix(t(crossprod(rankVec, outcomeMatrix)), nrow = dim(rankVec)[1])
} else {
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
pointVec
}
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
sampleMult
apply(sampleMult, 2, calcPoints, outcomeMatrix = sampleOutcomes)
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
shiny::runApp('GitHub/fs2')
startFavs <- matrix(rep(1:16, each = 16), ncol = 16)
startFavs <- matrix(rep(1:16, each = 16), ncol = 16, byrow = T)
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
rm(list = ls())
library(shiny); library(scales)
setwd("D:/Documents/GitHub/fs2")
load("useWeeklyFile.RData")
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
input <- data.frame(players = 250, first = 225, second = 125, third = 50)
results <- calcWinners(input$players)
winDollars <- round(as.data.frame(t((results() %*% c(input$first, input$second, input$third)))), 1)
winDollars <- round(as.data.frame(t((results %*% c(input$first, input$second, input$third)))), 1)
winDollars
which(winDollars == max(winDollars))
startFavs[ , j] >= proxyRank
j = 1
proxyRank <- 17 - j
startFavs[5, j] <- proxyRank
startDogs <- proxyRank
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
startDogs[5, j] <- proxyRank
startFavs[ , j] >= proxyRank
bestRank <- 12
for (j in 1:16){ #j = 1
bestRank <- 12
proxyRank <- 17 - j
startFavs[5, j] <- proxyRank
startDogs[5, j] <- proxyRank
if (proxyRank > bestRank){
for (i in 1:16){
if (startFavs[i, j] > proxyRank) {
startFavs[i, j]<- startFavs[i, j ] - 1
}
}
}
if (proxyRank < bestRank){
for (i in 1:16){
if (startFavs[i, j] < proxyRank) {
startFavs[i, j]<- startFavs[i, j ] + 1
}
}
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
}
altFavs
startFavs
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
for (j in 1:16){ #j = 1
bestRank <- 12
proxyRank <- 17 - j
startFavs[5, j] <- proxyRank
startDogs[5, j] <- proxyRank
if (proxyRank > bestRank){
for (i in 1:16){
if (startFavs[i, j] >= proxyRank) {
startFavs[i, j]<- startFavs[i, j ] - 1
}
}
}
if (proxyRank < bestRank){
for (i in 1:16){
if (startFavs[i, j] <= proxyRank) {
startFavs[i, j]<- startFavs[i, j ] + 1
}
}
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
}
startFavs
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
for (j in 1:16){ #j = 1
bestRank <- 12
proxyRank <- 17 - j
startFavs[5, j] <- proxyRank
startDogs[5, j] <- proxyRank
if (proxyRank > bestRank){
for (i in 1:16){
if (startFavs[i, j] >= proxyRank - 1) {
startFavs[i, j]<- startFavs[i, j ] - 1
}
}
}
if (proxyRank < bestRank){
for (i in 1:16){
if (startFavs[i, j] <= proxyRank + 1) {
startFavs[i, j]<- startFavs[i, j ] + 1
}
}
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
}
}
startFavs
j = 1
bestRank <- 12
proxyRank <- 17 - j
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 12
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
for (j in 1:16){ #j = 1
proxyRank <- 17 - j
if (proxyRank > bestRank){
for (i in 1:16){
if (i == 5) continue
if (startFavs[i, j] >= proxyRank - 1) {
startFavs[i, j]<- startFavs[i, j ] - 1
}
}
}
if (proxyRank < bestRank){
for (i in 1:16){
if (i == 5) continue
if (startFavs[i, j] <= proxyRank + 1) {
startFavs[i, j]<- startFavs[i, j ] + 1
}
}
}
}
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 12
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
for (j in 1:16){ #j = 1
proxyRank <- 17 - j
if (proxyRank > bestRank){
for (i in 1:16){
if (i == 5) next
if (startFavs[i, j] >= proxyRank - 1) {
startFavs[i, j]<- startFavs[i, j ] - 1
}
}
}
if (proxyRank < bestRank){
for (i in 1:16){
if (i == 5) next
if (startFavs[i, j] <= proxyRank + 1) {
startFavs[i, j]<- startFavs[i, j ] + 1
}
}
}
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
startFavs
altFavs
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 12
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
startFavs
for (j in 1:16){ #j = 1
proxyRank <- 17 - j
if (proxyRank > bestRank){
for (i in 1:16){
if (i == 5) next
if (startFavs[i, j] >= proxyRank - 1) {
startFavs[i, j]<- startFavs[i, j ] - 1
}
}
}
if (proxyRank < bestRank){
for (i in 1:16){
if (i == 5) next
if (startFavs[i, j] <= proxyRank + 1) {
startFavs[i, j]<- startFavs[i, j ] + 1
}
}
}
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
startFavs
bestRank <- 5
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
for (j in 1:16){ #j = 1
proxyRank <- 17 - j
startFavs[startFavs[1:(bestRank - 1), j] > startFavs[bestRank, j], j] <- startFavs[startFavs[1:(bestRank - 1), j] - 1
startFavs[startFavs[(bestRank + 1):1, j] < startFavs[bestRank, j], j] <- startFavs[startFavs[(bestRank + 1):1, j] + 1
}
j = 1
proxyRank <- 17 - j
startFavs[startFavs[1:(bestRank - 1), j] > startFavs[bestRank, j], j]
startFavs
startFavs[1:(bestRank - 1), j]
startFavs[1:(bestRank - 1), j] > startFavs[bestRank, j]
startFavs[bestRank, j]
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
for (j in 1:16){ #j = 1
proxyRank <- 17 - j
startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] <- startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] - 1
startFavs[startFavs[(bestRank + 1):1, j] <= startFavs[bestRank, j], j] <- startFavs[startFavs[(bestRank + 1):1, j] <= startFavs[bestRank, j], j] + 1
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
startFavs
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
for (j in 1:(bestRank - 1)){ #j = 1
startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] <- startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] - 1
}
for (j in (bestRank + 1):16){ #j = 1
startFavs[startFavs[(bestRank + 1):1, j] <= startFavs[bestRank, j], j] <- startFavs[startFavs[(bestRank + 1):1, j] <= startFavs[bestRank, j], j] + 1
}
altFavs <- startFavs
altFavs[bestRank, ] <- rep(0, 16)
startFavs
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
for (j in 1:16){ #j = 1
if (j < bestRank){
startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] <- startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] - 1
}
if (j > bestRank){
startFavs[startFavs[(bestRank + 1):1, j] <= startFavs[bestRank, j], j] <- startFavs[startFavs[(bestRank + 1):1, j] <= startFavs[bestRank, j], j] + 1
}
}
startFavs
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
startFavs[1:(bestRank - 1), j]
startFavs[bestRank, j]
j = 1
startFavs[bestRank, j]
startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j]
startFavs[startFavs[1:(bestRank - 1), j] >= startFavs[bestRank, j], j] <- startFavs[1:(bestRank - 1), j] - 1
startFavs
j = 1
startFavs <- matrix(rep(16:1, each = 16), ncol = 16, byrow = T)
startDogs <- matrix(rep(0, 16^2), ncol = 16)
bestRank <- 5
startFavs[5, ] <- 16:1
startDogs[5, ] <- 16:1
startFavs[ -bestRank , j ]
startFavs[startFavs[-bestRank, j ] >= 17 - j, j]
startFavs[startFavs[-bestRank, j ] >= (17 - j), j]
startFavs[, j]
startFavs[startFavs[1:(bestRank - 1), j ] >= (17 - j), j]
startFavs[, j]
rm(list = ls())
genSq <- function(nGames){
matrix(rep(nGames, times = nGames), ncol = nGames, byrow = T)
}
genSq(16)
matrix(rep(nGames:1, times = nGames), ncol = nGames, byrow = T)
genSq <- function(nGames){
matrix(rep(nGames:1, times = nGames), ncol = nGames, byrow = T)
}
genSq(16)
genSq <- function(nGames){
matrix(rep(nGames:1, times = nGames), ncol = nGames)
}
genSq(16)
genGameRanks <- function(nGames) {nGames:1}
genSq <- function(nGames){
matrix(rep(genGameRanks(nGames), times = nGames), ncol = nGames)
}
genSq(14)
genZeroSq <- function(nGames){
matrix(rep(0), nGames^2), ncol = nGames)
}
matrix(rep(0), nGames^2, ncol = nGames)
genZeroSq <- function(nGames){
matrix(rep(0), nGames^2, ncol = nGames)
}
genZeroSq(15)
genZeroSq <- function(nGames){
matrix(rep(0, nGames^2), ncol = nGames)
}
genZeroSq(15)
nGames = 16
altFavs <- genZeroSq(nGames)
altUpsets <- altFavs
altUpsetsRow <- altUpsets
startRanks <- genSq(nGames)
topCol = 5
for (j in dim(altFavs)[2]){
j
}
for (j in 1:(dim(altFavs)[2])){
j
}
dim(altFavs)[2]
1:(dim(altFavs)[2]
)
for (j in 1:(dim(altFavs)[2])){
j
}
genGameRanks <- function(nGames = 16) {nGames:1}
# generate square matrix with each column == gameRanks
genSq <- function(nGames = 16){
matrix(rep(genGameRanks(nGames), times = nGames), ncol = nGames)
}
#genSq(14)
genZeroSq <- function(nGames = 16){
matrix(rep(0, nGames^2), ncol = nGames)
}
genZeroSq(15)
nGames = 16
altFavs <- genZeroSq(nGames)
altUpsets <- altFavs
altUpsetsRow <- altUpsets
startRanks <- genSq(nGames)
topCol = 5
altUpsetsRow[topCol, ] <- genGameRanks(16)
for (j in 1:(dim(altFavs)[2])){
j
}
altUpsetsRow
for (j in 1:(dim(altFavs)[2])){
relevantRows <- altUpsets[altUpsets[ ,j] <= altUpsetsRow[topCol, j] ,j]
relevantRows
}
for (j in 1:nGames){
relevantRows <- altUpsets[altUpsets[ ,j] <= altUpsetsRow[topCol, j] ,j]
relevantRows
}
j = 16
j = 1
altUpsets[ ,j] <= altUpsetsRow[topCol, j]
altUpsetsRow[topCol, j]
relevantRows <- altUpsets[altUpsets[1:(topCol - 1) ,j] <= altUpsetsRow[topCol, j] ,j]
altUpsets[1:(topCol - 1) ,j] <= altUpsetsRow[topCol, j]
altUpsets[altUpsets[1:(topCol - 1) ,j] <= altUpsetsRow[topCol, j] ,j]
startRanks[j:(topCol ,j]
startRanks[j:topCol ,j]
for (j in 1:nGames){ #j = 1
threshold <- (nGames + 1 - j)
if (j < topCol){
altUpsets[j:(topCol - 1) ,j] <- startRanks[threshold:topCol ,j]
}
}
nGames = 16
altFavs <- genZeroSq(nGames)
altUpsets <- altFavs
altUpsetsRow <- altUpsets
startRanks <- genSq(nGames)
topCol = 5
altUpsetsRow[topCol, ] <- genGameRanks(16)
j = 1
threshold <- (nGames + 1 - j)
startRanks[threshold:topCol ,j]
altUpsets[j:(topCol - 1) ,j] <- startRanks[(j + 1):(topCol - 1) ,j]
altUpsets[j:(topCol - 1) ,j] <- startRanks[(j + 1):topCol ,j]
altUpsets
altUpsets <- startRanks
altUpsets <- startRanks
for (j in 1:nGames){ #j = 1
threshold <- (nGames + 1 - j)
if (j < topCol){
altUpsets[j:(topCol - 1) ,j] <- startRanks[(j + 1):topCol ,j]
}
if (j > topCol){
altUpsets[(topCol + 1):j ,j] <- startRanks[topCol:(j-1) ,j]
}
}
altUpsets
altUpsets <- startRanks
altUpsets[topCol, ] <- genGameRanks(16)
altUpsets
