varImpOverall <- rbind(varImp(rfBelt)$importance, varImp(rfArm)$importance, varImp(rfDumbell)$importance, varImp(rfForearm)$importance)
load("~/GitHub/pml/.RData")
.9965^20
y <- c(0.4, 0.7, 0.99)
x <- c(10, 100, 1000)
plot(x, y)
?plot
.995^20
load("~/GitHub/wle/.RData")
load("~/GitHub/pml/.RData")
load("~/GitHub/wle/.RData")
load("~/GitHub/pml/.RData")
load("~/GitHub/pml/.RData")
load("~/GitHub/pml/.RData")
college_fb_upload <- read.csv("D:/WTP/college_fb_upload.csv")
View(college_fb_upload)
getwd()
shiny::runApp()
setwd("~/GitHub/portfolioRiskVis")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?reactive
input <- data.frame("treas" = 30.26, "tips" = 20.85, "corp" = 15.70, "us" =
11.84, "intl" = 11.56, "commod" = 9.79)
Asset <- c("Commodities","Int'l Stocks","US Stocks","Corp. Bonds","TIPS","Treasuries"
)
Volatility <- c(0.3, .2, .2, .12, .1, .07)
volDF <- data.frame(Volatility)
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.15, 0.1, 0.2, 0.1, 0.1),
c(0.15, 1, 0.7, 0.35, 0.1, 0.1),
c(0.1, 0.7, 1, 0.35, 0.1, 0.1),
c(0.2, 0.35, 0.35, 1, 0.65, 0.6),
c(0.1, 0.1, 0.1, 0.65, 1, 0.95),
c(0.1, 0.1, 0.1, 0.6, 0.95, 1)), nrow = 6)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
portfolioValue <- sum(input$commod, input$intl, input$us, input$corp,
input$tips, input$treas)
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue())
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue)
contributions <- weights * (covariances %*% weights())
contributions <- weights * (covariances %*% weights
contributions <- weights * (covariances %*% weights)
contributions <- weights * (covariances %*% weights)
contributions <- weights * (covariances %*% weights)[,1]
contributions
portfolio_variance <- sum(contributions)
portfolio_std <- sqrt(portfolio_variance)
risk_contributions <- contributions/sum(contributions)
library(ggplot2); library(scales)
risk <- data.frame(cbind(weights, Volatility, contributions))
input <- data.frame("treas" = 30.26, "tips" = 20.85, "corp" = 15.70, "us" =
11.84, "intl" = 11.56, "commod" = 9.79)
Asset <- c("Commodities","Int'l Stocks","US Stocks","Corp. Bonds","TIPS","Treasuries"
)
Volatility <- c(0.3, .2, .2, .12, .1, .07)
volDF <- data.frame(Volatility)
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.15, 0.1, 0.2, 0.1, 0.1),
c(0.15, 1, 0.7, 0.35, 0.1, 0.1),
c(0.1, 0.7, 1, 0.35, 0.1, 0.1),
c(0.2, 0.35, 0.35, 1, 0.65, 0.6),
c(0.1, 0.1, 0.1, 0.65, 1, 0.95),
c(0.1, 0.1, 0.1, 0.6, 0.95, 1)), nrow = 6)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
axisLabels <- seq(0, 1.0, .05)
portfolioValue <- sum(input$commod, input$intl, input$us, input$corp,
input$tips, input$treas)
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue)
contributions <- weights * (covariances %*% weights)[,1]
contributions
portfolio_variance <- sum(contributions)
portfolio_std <- sqrt(portfolio_variance)
risk_contributions <- contributions/sum(contributions)
risk <- data.frame(cbind(weights, Volatility, contributions))
library(ggplot2); library(scales)
ggplot(risk, aes(x = Volatility, y = weights, size = contributions,
label = Asset), guide = FALSE) +
geom_point(colour = "white", fill = "red", shape = 21)+
scale_size_area(max_size = 25, name = "Risk Contribution", labels = percent) +
scale_x_continuous(name = "Volatility \n (Annualized Return Standard Deviation)", limits = c(0, .35), labels = percent) +
scale_y_continuous(name = "Weight (%)", limits = c(0, 1), labels = percent) +
geom_text(size = 4) + theme_bw() +
ggtitle("Portfolio Risk Dynamics \n Weight, Contribution vs. Volatility")
library(ggplot2); library(scales)
ggplot(risk, aes(x = Volatility, y = weights, size = contributions,
label = Asset), guide = FALSE) +
geom_point(colour = "white", fill = "red", shape = 21)+
scale_size_area(max_size = .10, name = "Risk Contribution", labels = percent) +
scale_x_continuous(name = "Volatility \n (Annualized Return Standard Deviation)", limits = c(0, .35), labels = percent) +
scale_y_continuous(name = "Weight (%)", limits = c(0, 1), labels = percent) +
geom_text(size = 4) + theme_bw() +
ggtitle("Portfolio Risk Dynamics \n Weight, Contribution vs. Volatility")
ggplot(risk, aes(x = Volatility, y = weights, size = contributions,
label = Asset), guide = FALSE) +
geom_point(colour = "white", fill = "red", shape = 21)+
scale_size_area(max_size = 40, name = "Risk Contribution", labels = percent) +
scale_x_continuous(name = "Volatility \n (Annualized Return Standard Deviation)", limits = c(0, .35), labels = percent) +
scale_y_continuous(name = "Weight (%)", limits = c(0, 1), labels = percent) +
geom_text(size = 4) + theme_bw() +
ggtitle("Portfolio Risk Dynamics \n Weight, Contribution vs. Volatility")
input <- data.frame("treas" = 34.26, "tips" = 21.85, "corp" = 16.70, "us" =
10.84, "intl" = 10.56, "commod" = 4.79)
portfolioValue <- sum(input$commod, input$intl, input$us, input$corp,
input$tips, input$treas)
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue)
contributions <- weights * (covariances %*% weights)[,1]
contributions
portfolio_variance <- sum(contributions)
portfolio_std <- sqrt(portfolio_variance)
risk_contributions <- contributions/sum(contributions)
risk <- data.frame(cbind(weights, Volatility, contributions))
ggplot(risk, aes(x = Volatility, y = weights, size = contributions,
label = Asset), guide = FALSE) +
geom_point(colour = "white", fill = "red", shape = 21)+
scale_size_area(max_size = 40, name = "Risk Contribution", labels = percent) +
scale_x_continuous(name = "Volatility \n (Annualized Return Standard Deviation)", limits = c(0, .35), labels = percent) +
scale_y_continuous(name = "Weight (%)", limits = c(0, 1), labels = percent) +
geom_text(size = 4) + theme_bw() +
ggtitle("Portfolio Risk Dynamics \n Weight, Contribution vs. Volatility")
ggplot(risk, aes(x = Volatility, y = weights, size = contributions,
label = Asset), guide = FALSE) +
geom_point(colour = "white", fill = "red", shape = 21)+
scale_size_area(max_size = 40, name = "Risk Contribution", labels = percent) +
scale_x_continuous(name = "Volatility \n (Annualized Return Standard Deviation)", limits = c(0, .35), labels = percent) +
scale_y_continuous(name = "Weight (%)", labels = percent) +
geom_text(size = 4) + theme_bw() +
ggtitle("Portfolio Risk Dynamics \n Weight, Contribution vs. Volatility")
risk <- data.frame(cbind(weights, Volatility, risk_contributions))
ggplot(risk, aes(x = Volatility, y = weights, size = risk_contributions,
label = Asset), guide = FALSE) +
geom_point(colour = "white", fill = "red", shape = 21)+
scale_size_area(max_size = 40, name = "Risk Contribution", labels = percent) +
scale_x_continuous(name = "Volatility \n (Annualized Return Standard Deviation)", limits = c(0, .35), labels = percent) +
scale_y_continuous(name = "Weight (%)", labels = percent) +
geom_text(size = 4) + theme_bw() +
ggtitle("Portfolio Risk Dynamics \n Weight, Contribution vs. Volatility")
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
input <- data.frame("treas" = 34.26, "tips" = 21.85, "corp" = 16.70, "us" =
10.84, "intl" = 10.56, "commod" = 4.79)
Asset <- c("Commodities","Int'l Stocks","US Stocks","Corp. Bonds","TIPS","Treasuries"
)
Volatility <- c(0.3, .2, .2, .12, .1, .07)
volDF <- data.frame(Volatility)
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.15, 0.1, 0.2, 0.1, 0.1),
c(0.15, 1, 0.7, 0.35, 0.1, 0.1),
c(0.1, 0.7, 1, 0.35, 0.1, 0.1),
c(0.2, 0.35, 0.35, 1, 0.65, 0.6),
c(0.1, 0.1, 0.1, 0.65, 1, 0.95),
c(0.1, 0.1, 0.1, 0.6, 0.95, 1)), nrow = 6)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
axisLabels <- seq(0, 1.0, .05)
portfolioValue <- sum(input$commod, input$intl, input$us, input$corp,
input$tips, input$treas)
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue)
contributions <- weights * (covariances %*% weights)[,1]
contributions
portfolio_variance <- sum(contributions)
portfolio_std <- sqrt(portfolio_variance)
risk_contributions <- contributions/sum(contributions)
risk <- data.frame(cbind(weights, Volatility, risk_contributions))
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions))
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions), col = red)
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions),
col = "red")
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions),
fg="white", bg="red")
risk <- data.frame(cbind(weights, Volatility, risk_contributions))
risk <- data.frame(cbind(risk, Asset))
risk <- data.frame(cbind(weights, Volatility, risk_contributions))
risk <- data.frame(cbind(risk, Asset))
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions),
fg="white", bg="red")
text(risk$Volatility, risk$weights, risk$Asset, cex=0.5)
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions),
fg="white", bg="red")
text(risk$Volatility, risk$weights, risk$Asset, cex=1.5)
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions),
fg="white", bg="red")
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
risk_contributions
contributions
input <- data.frame("treas" = 30.26, "tips" = 20.85, "corp" = 15.70, "us" =
11.84, "intl" = 11.56, "commod" = 9.79)
Asset <- c("Commodities","Int'l Stocks","US Stocks","Corp. Bonds","TIPS","Treasuries"
)
Volatility <- c(0.3, .2, .2, .12, .1, .07)
volDF <- data.frame(Volatility)
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.15, 0.1, 0.2, 0.1, 0.1),
c(0.15, 1, 0.7, 0.35, 0.1, 0.1),
c(0.1, 0.7, 1, 0.35, 0.1, 0.1),
c(0.2, 0.35, 0.35, 1, 0.65, 0.6),
c(0.1, 0.1, 0.1, 0.65, 1, 0.95),
c(0.1, 0.1, 0.1, 0.6, 0.95, 1)), nrow = 6)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
axisLabels <- seq(0, 1.0, .05)
portfolioValue <- sum(input$commod, input$intl, input$us, input$corp,
input$tips, input$treas)
weights <- c(input$commod, input$intl, input$us, input$corp, input$tips,
input$treas)/max(1, portfolioValue)
contributions <- weights * (covariances %*% weights)[,1]
contributions
portfolio_variance <- sum(contributions)
portfolio_std <- sqrt(portfolio_variance)
risk_contributions <- contributions/sum(contributions)
risk <- data.frame(cbind(weights, Volatility, risk_contributions))
risk <- data.frame(cbind(risk, Asset))
contributions
symbols(risk$Volatility, risk$weights, circles=sqrt(risk_contributions),
fg="white", bg="red")
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
contributions
symbols(risk$Volatility, risk$weights, circles=sqrt(contributions),
fg="white", bg="red")
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
contributions
symbols(risk$Volatility, risk$weights, circles=sqrt(contributions),
fg="white", bg="red", xlim = c(0, .35), ylim = c(0, 1))
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
contributions
symbols(risk$Volatility, risk$weights, circles=sqrt(contributions),
fg="white", bg="red", xlim = c(0, .35))
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
contributions
symbols(risk$Volatility, risk$weights, circles=.1*sqrt(contributions),
fg="white", bg="red", xlim = c(0, .35))
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
contributions
symbols(risk$Volatility, risk$weights, circles=(.1*sqrt(contributions)),
fg="white", bg="red", xlim = c(0, .35))
text(risk$Volatility, risk$weights, risk$Asset, cex=1.)
contributions
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
library("shinyapps", lib.loc="~/R/win-library/3.1")
shinyapps::setAccountInfo(name='mcarlo', token='ADC97CF366048E8CEFCF14847F986994', secret='Y2WIBgyFDZk/0UzCc7J8+lUsoFcf8kgpkn/hOgCb')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
install.packages("ROAuth")
library("ROAuth", lib.loc="~/R/win-library/3.1")
getwd()
Qtoken <- '3LpJ3vz9eqRsM7PFP2vw'
save(list="Qtoken", file="Quandl_token")
load("Quandl_token")
library("Quandl")
> Quandl.search('IT stocks', page = 1, source = NULL, silent = FALSE, authcode = Quandl.auth(Qtoken))
library("Quandl")
Quandl.search('IT stocks', page = 1, source = NULL, silent = FALSE, authcode = Quandl.auth(Qtoken))
?qnorm
?quantile
p <- c(.01, .05, .95, .99)
mu_x <- 0.05; sigma_x <- 0.10
qnorm(p, mean = mu_x, sd = sigma_x)
x_vals = seq(-0.25, 0.35, length.out = 100)
mu_X <- .05
sigma_X <- .1
mu_Y <- .025
sigma_Y <- .05
MSFT <- dnorm(x_vals, mean = mu_X, sd = sigma_X)
SBUX <- dnorm(x_vals, mean = mu_Y, sd = sigma_Y)
mu_R = .04
sigma_R = .09
W0 = 1e5
qnorm(.01, mean = mu_R, sd =sigma_R)
W0 * qnorm(.01, mean = mu_R, sd =sigma_R, lower.tail = F)
W0 * qnorm(.01, mean = mu_R, sd =sigma_R)
library("mvtnorm", lib.loc="~/R/win-library/3.1")
shiny::runApp('GitHub/shiny-examples/067-vertical-layout')
shiny::runApp('GitHub/portfolioRiskVis')
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
setwd("~/GitHub/portfolioRiskVis")
shiny::runApp()
rm(list = ls())
load("fansimsSkeleton.RData")
setwd("D:/Documents/GitHub/fs2")
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simParams()
save.image("useWeeklyFile.RData")
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simParams()
save.image("useWeeklyFile.RData")
rm(list = ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/Documents/shinySandbox')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/Documents/shinySandbox')
shiny::runApp('D:/Documents/shinySandbox')
shiny::runApp('D:/Documents/shinySandbox')
make_list <- function() {
list(date = Sys.Date(),
time = Sys.time(),
timezone = Sys.timezone())
}
make_list()
make_list()$time
lst <- list(numbers = 1:10, letters = letters, boolean = c(TRUE, FALSE))
lst
lst[1]
lst$numbers
lst[[1]]
pressure
colSums(pressure)[2]
colSums(pressure)[1]
sum(pressure$temperature)
plot(pressure$temperature, pressure$pressure)
sum(pressure$temperature, na.rm = T)
x <- 1
f <- function() {
y <- 2
c(x, y)
}
f()
obj <- 1
change_obj <- function(obj){
obj <- 2
}
change_obj(obj)
obj
change_obj2 <- function(obj){
obj <<- 2
}
change_obj2(obj)
obj
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
