setorder(standard_name_initial, Fund.Standard.Name, -RetMonths, Name)
standard_name_initial[, `:=`(YYYYMM = 100*YYYY + MM)]
standard_name_initial[, RowOrder := row(standard_name_initial)[,1] + YYYYMM]
standard_name_initial[, minRowOrder := min(RowOrder), by = Fund.Standard.Name]
standard_namesDT <- standard_name_initial[minRowOrder == RowOrder & RetMonths == Oldest]
standard_namesDT <- standard_name_initial[minRowOrder == RowOrder & RetMonths == Oldest]
standard_namesDT
standard_name_initial[, `:=`(SiblingName = standard_namesDT[standard_name_initial[,Name], Name],
SiblingTicker = standard_namesDT[standard_name_initial[,Name], Ticker])]
key(standard_namesDT)
key(standard_name_initial)
setkey(standard_name_initial, Name)
setkey(standard_namesDT, Name)
standard_name_initial[, `:=`(SiblingName = standard_namesDT[Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Name],
SiblingTicker = standard_namesDT[Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Ticker])]
standard_name_initial
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial
standard_name_initial[RetMonths < 18 & Oldest >= 18, `:=`(SiblingName = standard_namesDT[RetMonths < 18 & Oldest >= 18][Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Name],
SiblingTicker = standard_namesDT[RetMonths < 18 & Oldest >= 18][Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Ticker])]
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial[RetMonths < 18 & Oldest >= 18, SiblingName := standard_namesDT[Fund.Standard.Name == standard_name_initial[RetMonths < 18 & Oldest >= 18,Fund.Standard.Name], Name]]
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial[RetMonths < 18 & Oldest >= 18, `:=`(SiblingName = standard_namesDT[Fund.Standard.Name == standard_name_initial[RetMonths < 18 & Oldest >= 18,Fund.Standard.Name], Name], SiblingTicker = standard_namesDT[Fund.Standard.Name == standard_name_initial[RetMonths < 18 & Oldest >= 18,Fund.Standard.Name], Ticker] )]
standard_name_initial
write.table(standard_name_initial[, .(Name, Ticker, Fund.Standard.Name, Inception, SiblingName, SiblingTicker)], "siblingMap.txt")
getwd()
setwd("~/")
write.table(standard_name_initial[, .(Name, Ticker, Fund.Standard.Name, Inception, SiblingName, SiblingTicker)], "siblingMap.txt")
write.table(standard_name_initial[, .(Name, Ticker, Fund.Standard.Name, Inception, SiblingName, SiblingTicker)], "siblingMap.txt", row.names = F)
?rbinom()
rbinom(1, 16, .5)
dbinom(0:16, 16, 0.5)
round(dbinom(0:16, 16, 0.5), 2)
qbinom(rep(.5, 16), 16, .5)
qbinom(.5, 16, .5)
qbinom(dbinom(0:16, 16, 0.5), 16, .5)
qbinom(dbinom(0:16, 16, 0.5), 16, .5)
qbinom(dbinom(rep(.5, 16), 16, 0.5), 16, dbinom(0:16, 16, 0.5))
warnings()
dbinom(0:16, 16, 0.5)
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
round(dbinom(0:16, 16, 0.5), 2)
scoreDist <- round(dbinom(0:16, 16, 0.5), 6)
scoreDist <- cumsum(round(dbinom(0:16, 16, 0.5), 6))
?runif
set.seed(3)
draw <- runif(1)
randScore <- min(which(scoreDist > draw))
rm(list = ls())
nGames <- 16
scoreDist <- cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))
randScore <- function(draw) {min(which(scoreDist > draw))}
set.seed(3)
rm(list = ls())
nGames <- 16
scoreDist <- cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
set.seed(3)
simPoolScores(32)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[i]
season[, j] <- scoreDist(nGames)
}
season
}
set.seed(3)
simPoolSeason(32)
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[j]
season[, j] <- scoreDist(nGames)
}
season
}
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[j]
season[, j] <- scoreDist(nGames)
}
apply(season, 1, sum)
}
set.seed(3)
simPoolSeason(32)
nPlayes = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
simPoolScores <- function(nPlayers, randScore){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw))}
simPoolScores <- function(nPlayers, rScores, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
randScore(.6, 16)
randScore(.6, 16)
randScore(.6, 16)
randScore(runif(1), 16)
randScore(runif(1), 16)
randScore(runif(1), 16)
nPlayers = 32
draws <- runif(nPlayers)
randScore(draws, 16)
sapply(draws, randScore, nGames = 16)
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
draws <- runif(nPlayers)
season[, j] <- sapply(draws, randScore, nGames)
}
apply(season, 1, sum)
}
set.seed(3)
simPoolSeason(32)
hist(simPoolSeason(32))
hist(simPoolSeason(32)/256)
hist(simPoolSeason(1)/256)
simPoolSeason(1)
simPoolSeason(1)
simPoolSeason(1)
simPoolSeason(100)
summary(simPoolSeason(100))
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw)) - 1}
simPoolScores <- function(nPlayers, rScores, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
simPoolScores(32, 16)
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, nGames = numGames)
}
simPoolScores(32, 16)
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
#    draws <- runif(nPlayers)
season[, j] <- simPoolScores(nPlayers, nGames)# sapply(draws, randScore, nGames)
}
apply(season, 1, sum)
}
summary(simPoolSeason(100))
summary(simPoolSeason(100))
summary(simPoolSeason(200))
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(2000)/256)
summary(simPoolSeason(20000)/256)
simPoolScores(32, 16)
simPoolScores(32, 16)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw)) - 1}
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, nGames = numGames)
}
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
season[, j] <- simPoolScores(nPlayers, nGames)
}
apply(season, 1, sum)
}
summary(simPoolSeason(95))
summary(simPoolSeason(95))
summary(simPoolSeason(95))
dummy <- summary(simPoolSeason(95))
seasonDists <- matrix(rep(dummy, 100), ncol = 100)
set.seed(3)
dummy <- summary(simPoolSeason(95))
seasonDists <- matrix(rep(dummy, 100), ncol = 100)
for (j in 1:100){
seasonDists[, j] <- summary(simPoolSeason(95))
}
seasonDists <- matrix(rep(dummy, 100), nrow = 100)
names(dummy)
seasonDists <- matrix(rep(dummy, 100), nrow = 100)
colnames(seasonDists) <- names(dummy)
for (i in 1:100){
seasonDists[i, ] <- summary(simPoolSeason(95))
}
summary(seasonDists)
155/256
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/week20.csv", header=F)
data
data <- read.csv("~/week01.csv", header=F)
data
winprob <- data[,1]
confidence<-data[,2]
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
shiny::runApp('GitHub/straightsims')
WEEK01_2015 <- read.csv("~/WEEK01_2015.csv", stringsAsFactors=FALSE)
View(WEEK01_2015)
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK01_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
getwd()
setwd("C:/Users/Anichini/Documents") #"D:/Documents/GitHub/fs2")
setwd("C:/Users/Anichini/Documents/GitHub/fs2") #"D:/Documents/GitHub/fs2")
shiny::runApp()
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")  #("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
fanSizes <- seq(5, 100, by = 5)
resultsLists <- rep(results05, 20)
confTactics <- function(){
for(i in 2:20)  {
size <- fanSizes[i]
genList <- popConfList(size)
resultsLists[[2*(i - 1) + 1]] <<- genList[[1]]
resultsLists[[2*i]] <<- genList[[2]]
}
}
confTactics()
resultsLists
save.image("useWeeklyFile.RData")
weekFile
save(resultsLists, confWeekFile = weekFile, file = "useWeeklyFile.RData")
rm(list = ls())
load("useWeeklyFile.RData")
shiny::runApp()
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")  #("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
fanSizes <- seq(5, 100, by = 5)
resultsLists <- rep(results05, 20)
confTactics <- function(){
for(i in 2:20)  {
size <- fanSizes[i]
genList <- popConfList(size)
resultsLists[[2*(i - 1) + 1]] <<- genList[[1]]
resultsLists[[2*i]] <<- genList[[2]]
}
}
confTactics()
save(resultsLists, gameRanks, weekFile, file = "useWeeklyFile.RData")
save(resultsLists, gameRanks, weekFileConf, file = "useWeeklyFile.RData")
shiny::runApp()
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")  #("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
fanSizes <- seq(5, 250, by = 5)
resultsLists <- rep(results05, 50)
confTactics <- function(){
for(i in 2:50)  {
size <- fanSizes[i]
genList <- popConfList(size)
resultsLists[[2*(i - 1) + 1]] <<- genList[[1]]
resultsLists[[2*i]] <<- genList[[2]]
}
}
confTactics()
fanSizes <- seq(5, 100, by = 5)
resultsLists <- rep(results05, 20)
confTactics <- function(){
for(i in 2:20)  {
size <- fanSizes[i]
genList <- popConfList(size)
resultsLists[[2*(i - 1) + 1]] <<- genList[[1]]
resultsLists[[2*i]] <<- genList[[2]]
}
}
system.time(confTactics())
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){ #maxSize must be divisible by 5
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  {
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <<- genList[[1]]
outList[[2*i]] <<- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05, 100))
startList <- results05
maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <<- genList[[1]]
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
outList
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05, 100))
system.time(resultsLists <- confTactics(results05, 250))
save(resultsLists, gameRanks, weekFileConf, file = "useWeeklyFile.RData")
shiny::runApp()
calcWinners(5)
calcWinners(25)
calcWinners(250)
win250 <- calcWinners(250)
win250[which(win250[,1] == max(win250[,1])), ]
win25 <- calcWinners(25)
win25[which(win25[,1] == max(win25[,1])), ]
win25
weekFileConf
resultsLists[[10]]
resultsLists[[50]]
list25 <- resultsLists[[10]]
list250 <- resultsLists[[50]]
input <- data.frame(players = 25, first = 100, second = 75, third = 50)
round(as.data.frame(t((list25 %*% c(input$first, input$second, input$third)))), 1)
rank(round(as.data.frame(t((list25 %*% c(input$first, input$second, input$third)))), 1))
winD25 <- round(as.data.frame(t((list25 %*% c(input$first, input$second, input$third)))), 1)
input <- data.frame(players = 250, first = 100, second = 75, third = 50)
winD250 <- round(as.data.frame(t((list250 %*% c(input$first, input$second, input$third)))), 1)
rank(win25); rank(win250)
winD25
winD250
input <- data.frame(players = 25, first = 100, second = 0, third = 0)
winD25 <- round(as.data.frame(t((list25 %*% c(input$first, input$second, input$third)))), 1)
input <- data.frame(players = 250, first = 100, second = 0, third = 0)
winD250 <- round(as.data.frame(t((list250 %*% c(input$first, input$second, input$third)))), 1)
rank(win25); rank(win250)
rank(win25)
win25
winD250
winD25
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("D:/Documents/GitHub/fs2")
load("useWeeklyFile.RData")
load("fansimsSkeleton.RData")
load("altStuff.RData")
save(resultsLists, gameRanks, strategies, weekFileConf, file = "useWeeklyFile.RData")
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")  #("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
processFile("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
processFile("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
save(resultsLists, gameRanks, strategies, weekFileConf, file = "useWeeklyFile.RData")
rm(list = ls())
shiny::runApp()
shiny::runApp()
setwd("D:/Documents/GitHub/fs2")
load("useWeeklyFile.RData")
resultsLists[[2]]
resultsLists[[10]]
resultsLists[[50]]
input <- data.frame(players = 25, first = 100, second = 0, third = 0)
results <- resultsLists[[2 * input$players/5]]
results
winDollars <- round(as.data.frame(t((results() %*% c(input$first, input$second, input$third)))), 1)
winDollars <- round(as.data.frame(t((results %*% c(input$first, input$second, input$third)))), 1)
winDollars
winnings <- as.data.frame(cbind(gameRanks, favorites, strategies[,order(-winDollars[1,])[1:3]]))
favorites <- weekFileConf$Victor
winnings <- as.data.frame(cbind(gameRanks, favorites, strategies[,order(-winDollars[1,])[1:3]]))
winnings
strategies
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
genMtx() #strategies
strategies
simParams()
littleSim()
rm(list = ls())
load("useWeeklyFile.RData")
strategies
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
resultsLists[[10]]
save(resultsLists, gameRanks, strategies, weekFileConf, file = "useWeeklyFile.RData")
rm(list = ls())
library(shiny); library(scales)
setwd("D:/Documents/GitHub/fs2")
shiny::runApp()
resultsLists[[10]]
load("useWeeklyFile.RData")
favorites <- weekFileConf$Victor
resultsLists[[50]]
resultsLists[[10]]
resultsLists[[5]]
resultsLists[[2]]
resultsLists[[50]]
resultsLists[[48]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
weekFileConf
weekFileConf[5:6,]
weekFileConf[5:6,c(2:4, 6)]
weekFileConf[,c(2:4, 6)]
weekFileConf[,c(2:4, 6, 8:9)]
shiny::runApp('D:/Documents/GitHub/straightsims')
shiny::runApp('D:/Documents/GitHub/straightsims')
