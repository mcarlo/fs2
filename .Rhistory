rownames(pcaScores) <- (144:450) %% 12 + 197801 + 100 * trunc((144:450) / 12)
pcaScores <- matrix(rep(0.00, 14 * 306), ncol = 14)
rownames(pcaScores) <- ((144:449) %% 12 + 197801 + 100 * trunc((144:449) / 12))
i = 144
princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings
ongoingACreturns[i, ]
ongoingACreturns[i, ] %*% princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings
str(princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings)
str(princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings
princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings
princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,]
ongoingACreturns[i, ] %*% princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,]
ongoingACreturns[i, ] %*% princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14]
str(ongoingACreturns[i, ])
as.vector(ongoingACreturns[i, ])
princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14]
crossprod(as.vector(ongoingACreturns[i, ]), princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14])
is.numeric(ongoingACreturns)
typeof(ongoingACreturns)
ongoingACreturns <- matrix(read.csv("~/model data/PCA/ongoingACreturns.csv", stringsAsFactors=FALSE)[1:450, 2:15], ncol = 14)
typeof(ongoingACreturns)
colnames(ongoingACreturns)
colnames(ongoingACreturns) <- c("Bills", "IntBonds", "LongBonds", "HighYield", "LargeCap", "MidCap", "SmallCap", "EAFE", "EmMkts", "NonUSGovt", "EMBI", "CSBCI", "TIPS", "REIT")
pcaFitOngoing <- princomp(ongoingACreturns, cor = F)
ongoingACreturns <- matrix(as.numeric(read.csv("~/model data/PCA/ongoingACreturns.csv", stringsAsFactors=FALSE)[1:450, 2:15]), ncol = 14)
ongoingACreturns <- matrix(unlist(read.csv("~/model data/PCA/ongoingACreturns.csv", stringsAsFactors=FALSE)[1:450, 2:15]), ncol = 14)
colnames(ongoingACreturns) <- c("Bills", "IntBonds", "LongBonds", "HighYield", "LargeCap", "MidCap", "SmallCap", "EAFE", "EmMkts", "NonUSGovt", "EMBI", "CSBCI", "TIPS", "REIT")
ongoingACreturns
pcaFitOngoing <- princomp(ongoingACreturns, cor = F)
i = 144
princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14]
as.vector(ongoingACreturns[i, ])
crossprod(as.vector(ongoingACreturns[i, ]), princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14])
pcaScores <- foreach(i = 144:449, .combine = rbind) %do% {i = 144
crossprod(as.vector(ongoingACreturns[i, ]), princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14])
}
pcaScores
pcaScores <- foreach(i = 144:449, .combine = rbind) %do% {
crossprod(as.vector(ongoingACreturns[i, ]), princomp(ongoingACreturns[(i - 59):i, ], cor = F)$loadings[1:14,1:14])
}
pcaScores
colnames(ongoingACreturns)
ongoingACreturns$LargeCap[390:449]
ongoingACreturns[390:449,]
ongoingACreturns[390:449,]$LargeCap
pcaScores[390:449,]
pcaScores[247:306,]
lm(ongoingACreturns[390:449,5] ~ pcaScores[247:306,])
fit5 <- lm(ongoingACreturns[390:449,5] ~ pcaScores[247:306,])
fit5
str(fit5)
fit5$model
summary(fit5)
colnames(ongoingACreturns)
fit12 <- lm(ongoingACreturns[390:449,12] ~ pcaScores[247:306,])
summary(fit12)
summary(fit5)
ongoingACreturns[144,]
ongoingACreturns[145:450,]
pcaFitOngoing <- princomp(ongoingACreturns[145:450,], cor = F)
pcaFitOngoing$loadings[, "Comp.1"]
pcaFitOngoing
summary(pcaFitOngoing)
pcaFitOngoing$loadings
str(pcaFitOngoing)
pcaFitOngoing$scores
?princomp
PC1 <- pcaFitOngoing$scores["Comp.1"]
PC2 <- pcaFitOngoing$scores["Comp.2"]
PC3 <- pcaFitOngoing$scores["Comp.3"]
PC4.5 <- apply(pcaFitOngoing$scores[c("Comp.4", "Comp.5")], 2, mean)
pcaFitOngoing$scores[c("Comp.4", "Comp.5")]
pcaFitOngoing$scores[, 1]
PC1 <- pcaFitOngoing$scores[, 1]
PC2 <- pcaFitOngoing$scores[, 2]
PC3 <- pcaFitOngoing$scores[, 3]
PC4.5 <- apply(pcaFitOngoing$scores[c(4, 5)], 2, mean)
PC4.5 <- apply(pcaFitOngoing$scores[, c(4, 5)], 2, mean)
pcModel <- cbind(PC1, PC2, PC3, PC4.5)
model5 <- lm(ongoingACreturns[391:450, 5] ~ pcModel[247:306,])
summary(model5)
model12 <- lm(ongoingACreturns[391:450, 12] ~ pcModel[247:306,])
summary(model12)
colnames(ongoingACreturns)
model13 <- lm(ongoingACreturns[391:450, 13] ~ pcModel[247:306,])
summary(model13)
model3 <- lm(ongoingACreturns[391:450, 3] ~ pcModel[247:306,])
summary(model3)
model4 <- lm(ongoingACreturns[391:450, 4] ~ pcModel[247:306,])
summary(model4)
model14 <- lm(ongoingACreturns[391:450, 14] ~ pcModel[247:306,])
summary(model14)
model7 <- lm(ongoingACreturns[391:450, 7] ~ pcModel[247:306,])
summary(model7)
gc_401kReturns <- read.csv("~/gc_401kReturns.csv", stringsAsFactors=FALSE)
View(gc_401kReturns)
head(gc_401kReturns)
pcModel[218:306, ]
modelGC5 <- lm(gc_401kReturns$TRUST_5 ~ pcModel[218:306, ])
summary(modelGC5)
nonbrokerReturns <- read.csv("~/nonbrokerReturns.csv", stringsAsFactors=FALSE)
modelNB5 <- lm(nonbrokerReturns$TRUST_5[2:90] ~ pcModel[218:306, ])
nonbrokerReturns$TRUST_5[2:90]
nonbrokerReturns <- read.csv("~/nonbrokerReturns.csv", stringsAsFactors=FALSE, header = T)
head(nonbrokerReturns)
library(data.table)
nonbrokerReturns <- data.table(read.csv("~/nonbrokerReturns.csv", stringsAsFactors=FALSE, header = T))
nonbrokerReturns
nonbrokerReturns$TRUST_5[2:90]
nonbrokerReturns[, `:=`(TRUST_1 = as.numeric(TRUST_1), TRUST_2 = as.numeric(TRUST_2),
TRUST_3 = as.numeric(TRUST_3), TRUST_4 = as.numeric(TRUST_4),
TRUST_5 = as.numeric(TRUST_5), TRUST_6 = as.numeric(TRUST_6),
TRUST_7 = as.numeric(TRUST_7), )]
nonbrokerReturns[, `:=`(TRUST_5 = as.numeric(TRUST_5)]
nonbrokerReturns[, `:=`(TRUST_5 = as.numeric(TRUST_5))]
nonbrokerReturns[, TRUST_5]
nonbrokerReturns <- data.table(read.csv("~/nonbrokerReturns.csv", stringsAsFactors=FALSE, header = T))
nonbrokerReturns <- read.csv("~/nonbrokerReturns.csv", stringsAsFactors=FALSE, header = T)
modelNB5 <- lm(nonbrokerReturns$TRUST_5[2:90] ~ pcModel[218:306, ])
summary(modelNB5)
summary(modelGC5)
summary(modelNB5)
summary(modelGC5)
modelPort5 <- lm(gc_401kReturns$AC_PORTFOLIO_5 ~ pcModel[218:306, ])
summary(modelPort5)
modelGC5 <- lm(gc_401kReturns$TRUST_5[78:89] ~ pcModel[295:306, ])
summary(modelGC5)
nonbrokerReturns <- read.csv("~/nonbrokerReturns.csv", stringsAsFactors=FALSE, header = T)
modelNB5 <- lm(nonbrokerReturns$TRUST_5[79:90] ~ pcModel[295:306, ])
summary(modelNB5)
modelPort5 <- lm(gc_401kReturns$AC_PORTFOLIO_5[78:89] ~ pcModel[295:306, ])
summary(modelPort5)
gc_401kReturns[1,]
gc_401kReturns <- read.csv("~/gc_401kReturns.csv", stringsAsFactors=FALSE)
head(gc_401kReturns)
manning <- lm(gc_401kReturns$Manning._and_.Napier.World.Opportunities.A.EXWAX.[78:89] ~ pcModel[295:306, ])
summary(manning)
vipsx <-  lm(gc_401kReturns$Vanguard.Inflation.Protected.Secs.Inv.VIPSX.[78:89] ~ pcModel[295:306, ])
summary(vipsx)
library(combinat)
testM <- 1
x1 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
testM <- 2
x2 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 120
testM <- 3
x3 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 560
testM <- 4
x4 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 1820
# 1 + 16 + 120 + 560 + 1820 = 2517
testM <- 5
x5 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 4368
testM <- 6
x6 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 8008
testM <- 7
x7 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
testM <- 8
x8 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 12870
library(foreach)
createTwinPicks <- function(xMatrix){
nCols <- dim(xMatrix)[2]
outMat <- matrix(rep(1, 16 * nCols), ncol = nCols)
foreach(j = 1:nCols, .combine = cbind) %do% {outMat[xMatrix[, j], j] <- 0}
outMat
}
choose(16, 2)
populateTwinPicks <- function(xMatrix){ #xMatrix <- x8
nCols <- dim(xMatrix)[2]
chooseN <- dim(xMatrix)[1]
if(chooseN > 1) {
startCol <- 2 + foreach(n = 1:(chooseN - 1), .combine = '+') %do% {choose(16, n)}
} else {
startCol <- 2
}
endCol <- startCol + choose(16, chooseN) - 1
plugMatrix <- matrix(rep(1, 16 * nCols), nrow = 16)
for(j in 1:nCols){
plugMatrix[xMatrix[, j], j] <- 0
}
comparisonPicks[, startCol:endCol] <<- plugMatrix
}
comparisonPicks <- matrix(rep(1, 16 * (39203 * 2 + 1)), nrow = 16)
weekFile <- read.csv("2014week17.csv")
winprob <- weekFile$WinProbability
outcomeMatrix <- matrix(runif(32000) < winprob, nrow = 16)
outcomeMatrix[, 1:10]
comparisonPicks[, 1:10]
populateTwinPicks(x1)
populateTwinPicks(x2)
populateTwinPicks(x3)
populateTwinPicks(x4)
populateTwinPicks(x5)
populateTwinPicks(x6)
populateTwinPicks(x7)
populateTwinPicks(x8)
comparisonPicks[, 1:10]
comparisonPicks[, 39200:39203]
comparisonPicks[, 39200:39204]
comparisonPicks[, 39204:78406] <- -(comparisonPicks[, 1:39203] - 1)
comparisonPicks[, 78400:78407]
comparisonPicks[, 39204]
comparisonPicks <- comparisonPicks[, 1:78406]
comparisonPicks <- matrix(rep(1, 16 * (39203 * 2)), nrow = 16)
comparisonPicks[, 1:10]
populateTwinPicks <- function(xMatrix){ #xMatrix <- x8
nCols <- dim(xMatrix)[2]
chooseN <- dim(xMatrix)[1]
if(chooseN > 1) {
startCol <- 2 + foreach(n = 1:(chooseN - 1), .combine = '+') %do% {choose(16, n)}
} else {
startCol <- 2
}
endCol <- startCol + choose(16, chooseN) - 1
plugMatrix <- matrix(rep(1, 16 * nCols), nrow = 16)
for(j in 1:nCols){
plugMatrix[xMatrix[, j], j] <- 0
}
comparisonPicks[, startCol:endCol] <<- plugMatrix
}
populateTwinPicks(x1)
populateTwinPicks(x2)
populateTwinPicks(x3)
populateTwinPicks(x4)
populateTwinPicks(x5)
populateTwinPicks(x6)
populateTwinPicks(x7)
populateTwinPicks(x8)
comparisonPicks[, 39204:78406] <- -(comparisonPicks[, 1:39203] - 1)
winprob
outcomeMatrix <- matrix(runif(32000) < winprob, nrow = 16)
outcomeMatrix[, 1:10]
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$FanProb
fanMatrix <- matrix(runif(32000) < fanprob, nrow = 16)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanScoreSubset <- matrix(rep(0, 200000), nrow = 2000)
poolsize <- 100
sampleFans <- matrix(sample(1:2000, 2000 * poolsize, replace = T), nrow = 2000)
for (i in 1:2000){
fanScoreSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTied <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
mostwins <- which(colSums(comparisonTied) == max(colSums(comparisonTied)))
comparisonPicks[, outright]
comparisonPicks[, mostwins]
colSums(comparisonFirst)[outright]
colSums(comparisonTied)[mostwins]
weekFile <- read.csv("2014week15.csv")
winprob <- weekFile$WinProbability
outcomeMatrix <- matrix(runif(32000) < winprob, nrow = 16)
outcomeMatrix[, 1:10]
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$FanProb
fanMatrix <- matrix(runif(32000) < fanprob, nrow = 16)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanScoreSubset <- matrix(rep(0, 200000), nrow = 2000)
poolsize <- 100
sampleFans <- matrix(sample(1:2000, 2000 * poolsize, replace = T), nrow = 2000)
for (i in 1:2000){
fanScoreSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTied <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
mostwins <- which(colSums(comparisonTied) == max(colSums(comparisonTied)))
comparisonPicks[, outright]
comparisonPicks[, mostwins]
colSums(comparisonFirst)[outright]
colSums(comparisonTied)[mostwins]
hist(colSums(comparisonFirst))
hist(colSums(comparisonTied))
weekFile <- read.csv("2014week16.csv")
winprob <- weekFile$WinProbability
outcomeMatrix <- matrix(runif(32000) < winprob, nrow = 16)
# outcomeMatrix[, 1:10]
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$FanProb
fanMatrix <- matrix(runif(32000) < fanprob, nrow = 16)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanScoreSubset <- matrix(rep(0, 200000), nrow = 2000)
poolsize <- 100
sampleFans <- matrix(sample(1:2000, 2000 * poolsize, replace = T), nrow = 2000)
for (i in 1:2000){
fanScoreSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTied <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
mostwins <- which(colSums(comparisonTied) == max(colSums(comparisonTied)))
# comparisonPicks[, outright]
# comparisonPicks[, mostwins]
colSums(comparisonFirst)[outright]
colSums(comparisonTied)[mostwins]
poolsize <- 32
sampleFans <- matrix(sample(1:2000, 2000 * poolsize, replace = T), nrow = 2000)
for (i in 1:2000){
fanScoreSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTied <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
mostwins <- which(colSums(comparisonTied) == max(colSums(comparisonTied)))
fanScoreSubset <- matrix(rep(0, 2000 * poolsize), nrow = 2000)
sampleFans <- matrix(sample(1:2000, 2000 * poolsize, replace = T), nrow = 2000)
for (i in 1:2000){
fanScoreSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTied <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
mostwins <- which(colSums(comparisonTied) == max(colSums(comparisonTied)))
# comparisonPicks[, outright]
# comparisonPicks[, mostwins]
colSums(comparisonFirst)[outright]
colSums(comparisonTied)[mostwins]
poolsize <- 7
fanScoreSubset <- matrix(rep(0, 2000 * poolsize), nrow = 2000)
sampleFans <- matrix(sample(1:2000, 2000 * poolsize, replace = T), nrow = 2000)
for (i in 1:2000){
fanScoreSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTied <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
mostwins <- which(colSums(comparisonTied) == max(colSums(comparisonTied)))
# comparisonPicks[, outright]
# comparisonPicks[, mostwins]
colSums(comparisonFirst)[outright]
colSums(comparisonTied)[mostwins]
comparisonPicks[, outright]
comparisonPicks[, mostwins]
namedVec <- c(first = 127, second = 33, third = 5)
nnamedVec[-2]
namedVec[-2]
typeof(namedVec)
str(namedVec)
shiny::runApp('GitHub/rdt')
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
islands
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
head(islands)
AirPassengers
source('~/GitHub/fs2/app.R', echo=TRUE)
?switch
source('~/GitHub/fs2/app.R', echo=TRUE)
source('~/GitHub/fs2/app.R', echo=TRUE)
ncol(AirPassengers)
ncol(iris)
ncol(USArrests)
source('~/GitHub/fs2/app.R', echo=TRUE)
rm(list = ls())
iar <- read.csv("C:/userdata/iar2012.csv", stringsAsFactors=FALSE)
library(foreach)
currentYear <- 2015
qxCurrent <- function(qx, scaleG2, current = currentYear){
n <- current - 2012
scalingFactor <- (1 - scaleG2) ^ n
qxNow <- round(qx * scalingFactor, 6)
qxNow
}
genJavaDeathProb <- function(age, qx, gender) { #age = iar$age; qx = iar$qxFemale; gender = "female"
nRows <- length(qx)
deathProbs <- foreach(i = 1:nRows, .combine = c) %do% {
noquote(paste0("deathProbability_IAR_", gender, "[", age[i], "] = ", qx[i], ";"))
}
deathProbs
}
genJavaLifeExp <- function(age, ex, gender) { #age = iar$age; qx = iar$qxFemale; gender = "female"
nRows <- length(ex)
lifeExps <- foreach(i = 1:nRows, .combine = c) %do% {
noquote(paste0("lifeExpectancy_IAR_", gender, "[", age[i], "] = ", ex[i], ";"))
}
lifeExps
}
qx2015female <- qxCurrent(iar$qxFemale, iar$scaleG2Female, 2015)
qx2015male <- qxCurrent(iar$qxMale, iar$scaleG2Male, 2015)
deathProbFemale <- sapply(genJavaDeathProb(iar$age, qx2015female, "female"), noquote)
deathProbMale <- sapply(genJavaDeathProb(iar$age, qx2015male, "male"), noquote)
survivalMale <- c(1, cumprod((1-qx2015male[-(120:121)])))
survivalFemale <- c(1, cumprod((1-qx2015female[-(120:121)])))
lxMale <- 1000000 * survivalMale
TxMale <- cumsum(lxMale[order(-age[1:120])])[order(-age[1:120])]
exMale <- round(TxMale/lxMale, 2)
age <- iar$age
qx2015female <- qxCurrent(iar$qxFemale, iar$scaleG2Female, 2015)
qx2015male <- qxCurrent(iar$qxMale, iar$scaleG2Male, 2015)
deathProbFemale <- sapply(genJavaDeathProb(iar$age, qx2015female, "female"), noquote)
deathProbMale <- sapply(genJavaDeathProb(iar$age, qx2015male, "male"), noquote)
survivalMale <- c(1, cumprod((1-qx2015male[-(120:121)])))
survivalFemale <- c(1, cumprod((1-qx2015female[-(120:121)])))
lxMale <- 1000000 * survivalMale
TxMale <- cumsum(lxMale[order(-age[1:120])])[order(-age[1:120])]
exMale <- round(TxMale/lxMale, 2)
exMale[68]
survivalMale
payments <- rep(0, 121)
payments[68:121] <- 36000
payments
discount <- (1.0228) ^ -age
discount
discount <- (1.0228) ^ -(age - 67)
discount[1:67] <- 0
discount
discount * payments
sum(discount * payments * survivalMale)/survivalMale[68]
sum(discount[1:120] * payments[1:120] * survivalMale)/survivalMale[68]
sum(discount[1:120] * payments[1:120] * survivalMale)
qx2015male <- qxCurrent(iar$qxMale, iar$scaleG2Male, 2015)
survivalMale <- c(1, cumprod((1-qx2015male[-(121)])))
survivalFemale <- c(1, cumprod((1-qx2015female[-(121)])))
lxMale <- 1000000 * survivalMale
TxMale <- cumsum(lxMale[order(-age[1:120])])[order(-age[1:120])]
exMale <- round(TxMale/lxMale, 2) #exMale[68]
lxFemale <- 1000000 * survivalFemale
TxFemale <- cumsum(lxFemale[order(-age[1:120])])[order(-age[1:120])]
exFemale <- round(TxFemale/lxFemale, 2)
lifeExpMale <- sapply(genJavaLifeExp(iar$age[-121], exMale, "male"), noquote)
lifeExpFemale <- sapply(genJavaLifeExp(iar$age[-121], exFemale, "female"), noquote)
javaMatrix <- t(matrix(cbind(lifeExpMale, lifeExpFemale, deathProbMale[-121], deathProbFemale[-121]), ncol = 4))
javaCode <- as.vector(javaMatrix)
javaMatrix <- t(matrix(cbind(lifeExpMale, lifeExpFemale, deathProbMale, deathProbFemale), ncol = 4))
javaCode <- as.vector(javaMatrix)
survivalMale
payments <- rep(0, 121)
payments[68:121] <- 36000
payments
discount <- (1.0228) ^ -(age - 67)
discount[1:67] <- 0
discount
sum(discount * payments * survivalMale)/survivalMale[68]
exMale[19]
exMale[61]
rp <- read.csv("C:/userdata/rp2014.csv", stringsAsFactors=FALSE)
rp
ageRP <- rp$Age
qxMaleRP <- rp$HA_male; qxFemaleRP <- rp$HA_female
qxMaleRP
qxMaleRP[is.na(qxMaleRP)] <- 0; qxFemaleRP[is.na(qxFemaleRP)] <- 0;
qxMaleRP
qxFemaleRP
survivalM_RP <- cumprod((1-qxMaleRP))
survivalF_RP <- cumprod((1-qxFemaleRP))
survivalF_RP
lxM_RP <- 1000000 * survivalM_RP
TxM_RP <- cumsum(lxM_RP[order(-age)])[order(-age)]
TxM_RP <- cumsum(lxM_RP[order(-ageRP)])[order(-ageRP)]
exM_RP <- round(TxM_RP/lxM_RP, 2) #exMale[68]
exM_RP[ageRP == 60]
exM_RP[60]
exM_RP
ageRP
ageRP == 60
which(ageRP == 60)
exM_RP[which(ageRP == 60)]
exM_RP[which(ageRP == 70)]
lxF_RP <- 1000000 * survivalF_RP
TxF_RP <- cumsum(lxF_RP[order(-ageRP)])[order(-ageRP)]
exF_RP <- round(TxF_RP/lxF_RP, 2)
exF_RP[which(ageRP == 60)]
exF_RP[which(ageRP == 70)]
load("deploy.RData") #load("tvt.RData") #save.image("tvt.RData")
setwd("~/GitHub/sk")
load("deploy.RData") #load("tvt.RData") #save.image("tvt.RData")
library(stringi); library(compiler)
suppressMessages(suppressWarnings(library(data.table)))
cmpPred
getConf
getPred
genLegend
cmpPredNT
cmpPred
subTrain
subTrainNT
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/rdt')
shiny::runApp('~/GitHub/shiny-examples/013-selectize')
shiny::runApp('~/GitHub/shiny-examples/017-select-vs-selectize')
shiny::runApp('~/GitHub/fs2')
shiny::runApp('~/GitHub/fs2')
setwd("~/GitHub/fs2")
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week17.csv")
genMtx()
simParams()
save.image("useWeeklyFile.RData")
rm(list = ls())
library(shiny)
load("useWeeklyFile.RData")
input <- data.frame(players = 250, first = 225, second = 125, third = 50)
simulatePool(numFans = input$players, payouts = c(input$first, input$second, input$third))
topWin
topMoney
strategies[, topWin]
strategies[, topMoney]
favorites
gameRanks <- games:1
shiny::runApp()
