qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
round(dbinom(0:16, 16, 0.5), 2)
scoreDist <- round(dbinom(0:16, 16, 0.5), 6)
scoreDist <- cumsum(round(dbinom(0:16, 16, 0.5), 6))
?runif
set.seed(3)
draw <- runif(1)
randScore <- min(which(scoreDist > draw))
rm(list = ls())
nGames <- 16
scoreDist <- cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))
randScore <- function(draw) {min(which(scoreDist > draw))}
set.seed(3)
rm(list = ls())
nGames <- 16
scoreDist <- cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
set.seed(3)
simPoolScores(32)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[i]
season[, j] <- scoreDist(nGames)
}
season
}
set.seed(3)
simPoolSeason(32)
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[j]
season[, j] <- scoreDist(nGames)
}
season
}
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[j]
season[, j] <- scoreDist(nGames)
}
apply(season, 1, sum)
}
set.seed(3)
simPoolSeason(32)
nPlayes = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
simPoolScores <- function(nPlayers, randScore){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw))}
simPoolScores <- function(nPlayers, rScores, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
randScore(.6, 16)
randScore(.6, 16)
randScore(.6, 16)
randScore(runif(1), 16)
randScore(runif(1), 16)
randScore(runif(1), 16)
nPlayers = 32
draws <- runif(nPlayers)
randScore(draws, 16)
sapply(draws, randScore, nGames = 16)
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
draws <- runif(nPlayers)
season[, j] <- sapply(draws, randScore, nGames)
}
apply(season, 1, sum)
}
set.seed(3)
simPoolSeason(32)
hist(simPoolSeason(32))
hist(simPoolSeason(32)/256)
hist(simPoolSeason(1)/256)
simPoolSeason(1)
simPoolSeason(1)
simPoolSeason(1)
simPoolSeason(100)
summary(simPoolSeason(100))
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw)) - 1}
simPoolScores <- function(nPlayers, rScores, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
simPoolScores(32, 16)
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, nGames = numGames)
}
simPoolScores(32, 16)
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
#    draws <- runif(nPlayers)
season[, j] <- simPoolScores(nPlayers, nGames)# sapply(draws, randScore, nGames)
}
apply(season, 1, sum)
}
summary(simPoolSeason(100))
summary(simPoolSeason(100))
summary(simPoolSeason(200))
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(2000)/256)
summary(simPoolSeason(20000)/256)
simPoolScores(32, 16)
simPoolScores(32, 16)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw)) - 1}
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, nGames = numGames)
}
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
season[, j] <- simPoolScores(nPlayers, nGames)
}
apply(season, 1, sum)
}
summary(simPoolSeason(95))
summary(simPoolSeason(95))
summary(simPoolSeason(95))
dummy <- summary(simPoolSeason(95))
seasonDists <- matrix(rep(dummy, 100), ncol = 100)
set.seed(3)
dummy <- summary(simPoolSeason(95))
seasonDists <- matrix(rep(dummy, 100), ncol = 100)
for (j in 1:100){
seasonDists[, j] <- summary(simPoolSeason(95))
}
seasonDists <- matrix(rep(dummy, 100), nrow = 100)
names(dummy)
seasonDists <- matrix(rep(dummy, 100), nrow = 100)
colnames(seasonDists) <- names(dummy)
for (i in 1:100){
seasonDists[i, ] <- summary(simPoolSeason(95))
}
summary(seasonDists)
155/256
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/week20.csv", header=F)
data
data <- read.csv("~/week01.csv", header=F)
data
winprob <- data[,1]
confidence<-data[,2]
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
nGames = 13
2^nGames
nGames = 16
2^nGames
nGames = 15
2^nGames
createSpaceN <- function(nGames = 16){ #nGames = 15
compPicksMatrix <- matrix(rep(1, nGames * (2^nGames)), nrow = nGames)
}
choose(16, 2)
choose(16, 3)
nCols <- function(nGames = 16){
count <- 0
for i in (1:nGames){
count <- count + choose(nGames, i)
}
count
}
nCols <- function(nGames = 16){
count = 0
for i in (1:nGames){
count <- count + choose(nGames, i)
}
count
}
nCols <- function(nGames = 16){
count = 0
for (i in 1:nGames){
count <- count + choose(nGames, i)
}
count
}
rm(list = ls())
library(combinat)
testM <- 1
x1 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
testM <- 2
x2 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 120
testM <- 3
x3 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 560
testM <- 4
x4 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 1820
# 1 + 16 + 120 + 560 + 1820 = 2517
testM <- 5
x5 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 4368
testM <- 6
x6 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 8008
testM <- 7
x7 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
testM <- 8
x8 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 12870
testM <- 9
x9 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
testM <- 10
x10 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 800
testM <- 11
x11 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 560
testM <- 12
x12 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 1820
# 1 + 16 + 120 + 560 + 1820 = 2517
testM <- 13
x13 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 4368
testM <- 14
x14 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 8008
testM <- 15
x15 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
testM <- 16
x16 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 12870
testM <- 0
x0 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
x16
x15
testM <- 15
x15 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
x15
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
rm(list = ls())
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(lubridate)))
library(scales)
cutoffDate <- dmy(30062014)
reportDate <- 201506
reportDateDMY <- cutoffDate + dyears(1)
setwd("C:/gcdm")
source("processHMData.R")
plans <- genPlansDT(cutoffDate)
trusts <- genTrustsDT(reportDateDMY) #rm(trusts)
trusts[TRUST_FAMILY_ID == 31295]
trusts
trusts[GC_AC_PORTFOLIO == 8] #trusts[TRUST_FAMILY_ID == 31295]
summary(trusts[, TRUST_FAMILY_ID])
plans[PLAN_ID == 24663]
setup()
HMTrust <- read.delim("HMTrust.txt", sep = ":",
stringsAsFactors=FALSE);
trusts <- as.data.table(HMTrust)
setkey(trusts, "TRUST_FAMILY", "TRUST_ID")
trusts[TRUST_FAMILY == 31295]
trusts[, EFFECTIVE_DATE := dmy(EFFECTIVE_DATE)]
rebalDates <- plans[, .(TRUST_FAMILY_ID, REBALANCE_DATE)]
setnames(rebalDates, "TRUST_FAMILY_ID", "TRUST_FAMILY")
setkey(rebalDates, TRUST_FAMILY)
trusts[, REBALANCE_DATE := rebalDates[trusts[, TRUST_FAMILY], REBALANCE_DATE]]
trusts[TRUST_FAMILY == 31295]
rebalDates[TRUST_FAMILY_ID == 31295]
trusts
rebalDates[TRUST_FAMILY_ID == 31295]
rebalDates
rebalDates[TRUST_FAMILY == 31295]
rebalDates[TRUST_FAMILY == trusts[, TRUST_FAMILY], REBALANCE_DATE]
trusts[, REBALANCE_DATE := rebalDates[TRUST_FAMILY == trusts[, TRUST_FAMILY], REBALANCE_DATE]]
rm(trusts)
trusts <- as.data.table(HMTrust) #rm(trusts)
setkey(trusts, "TRUST_FAMILY", "TRUST_ID") #trusts[TRUST_FAMILY == 31295]
trusts[, EFFECTIVE_DATE := dmy(EFFECTIVE_DATE)]
rebalDates <- plans[, .(TRUST_FAMILY_ID, REBALANCE_DATE)]
setnames(rebalDates, "TRUST_FAMILY_ID", "TRUST_FAMILY")
setkey(rebalDates, TRUST_FAMILY)  #rebalDates[TRUST_FAMILY == 31295]
rebalDates[TRUST_FAMILY == 31295]
trusts[TRUST_FAMILY == 31295]
trusts[, REBALANCE_DATE := rebalDates[trusts[, TRUST_FAMILY], REBALANCE_DATE]]
trusts[TRUST_FAMILY == 31295]
rebalDates[TRUST_FAMILY == 31295]
rm(trusts)
trusts <- as.data.table(HMTrust) #rm(trusts)
setkey(trusts, "TRUST_FAMILY", "TRUST_ID") #trusts[TRUST_FAMILY == 31295]
trusts[, EFFECTIVE_DATE := dmy(EFFECTIVE_DATE)]
rebalDates <- plans[, .(TRUST_FAMILY_ID, REBALANCE_DATE)]
setnames(rebalDates, "TRUST_FAMILY_ID", "TRUST_FAMILY")
setkey(rebalDates, TRUST_FAMILY)  #rebalDates[TRUST_FAMILY == 31295]
trusts[, REBALANCE_DATE := rebalDates[trusts, REBALANCE_DATE]]
rm(trusts)
trusts <- as.data.table(HMTrust) #rm(trusts)
setkey(trusts, "TRUST_FAMILY", "TRUST_ID") #trusts[TRUST_FAMILY == 31295]
trusts[, EFFECTIVE_DATE := dmy(EFFECTIVE_DATE)]
rebalDates <- unique(plans[, .(TRUST_FAMILY_ID, REBALANCE_DATE)])
setnames(rebalDates, "TRUST_FAMILY_ID", "TRUST_FAMILY")
setkey(rebalDates, TRUST_FAMILY)  #rebalDates[TRUST_FAMILY == 31295]
rebalDates[TRUST_FAMILY == 31295]
rebalDates[trusts[, TRUST_FAMILY],
]
trusts[, REBALANCE_DATE := rebalDates[trusts[, TRUST_FAMILY], REBALANCE_DATE]]
trusts[TRUST_FAMILY == 31295]
rm(list = ls())
setwd("~/GitHub/straightsims")
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK02_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "weeklyApp_straight/2015wk02.RData")
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
save(weekFile, playersBest, file = "weeklyApp_straight/app2015wk02.RData")
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk02.RData")
setwd("~/GitHub/straightsims/weeklyApp_straight")
shiny::runApp()
shiny::runApp()
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")  #
#processFile("D:/WTP/WEEK01_2015test13.csv") #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
rm(list = ls())
load("fansimsSkeleton.RData")
setwd("~/GitHub/fs2")
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK02_2015.csv")  #
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
save(resultsLists, gameRanks, strategies, weekFileConf, file = "weeklyApp_confidence/useWeeklyFile2015_02.RData")
shiny::runApp('weeklyApp_confidence')
