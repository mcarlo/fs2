sidebarPanel(
helpText('Is this matrix cool ?')
),
mainPanel(
uiOutput('matrix')
)
)
,
server = function(input,output){
load("useWeeklyFile.RData")
output$matrix <- renderUI({
M <- matrix(c(weekFile$WinProbability, weekFile$FanProb, weekFile$FavConf),ncol=3)
rownames(M) <- sapply(games:1L, paste0)
M <- print(xtable(M, align=rep("c", ncol(M)+1)),
floating=FALSE, tabular.environment="array", comment=FALSE, print.results=FALSE)
html <- paste0("$$", M, "$$")
list(
withMathJax(HTML(html))
)
})
}
)
)
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
premium <<- 16 - games
prem <<- FALSE
premiumPts <<- 0 + prem * premium
selectRows <<- (1:games)
selectRowsPrem <<- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows, drop = F]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games, drop = F], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games, drop = F], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games, drop = F], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows, drop = F], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simulatePool(numFans = 100, payouts = c(225, 125, 50))
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simParams()
suppressMessages(require(foreach))
fanIndex <<- foreach(resultIndex, .combine = rbind) %do% sample(1:2000, 250, replace = T)
rowMax <- 1
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
i = 1
resultIndex[i]
fanIndex[i,]
totalPoints[resultIndex[i], fanIndex[i,]]
dim(totalPoints)
rm(list = ls())
load("procFile.RData")
games <<- length(winProb)
premium <<- 16 - games
prem <<- FALSE
premiumPts <<- 0 + prem * premium
selectRows <<- (1:games)
selectRowsPrem <<- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
simOutcomes2 <<- (simOutcomes2[selectRows] <= winProb) * 1
rm(list = ls())
load("fansimsSkeleton.RData")
weekFilename = "2014week17.csv"
weekFile <- read.csv(weekFilename, stringsAsFactors = F, colClasses = c("character", "numeric", "integer",
"numeric", "numeric", "numeric", "numeric",
"character"))
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
games <<- length(winProb)
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
fanProb <<- weekFile$FanProb
favConf <<- weekFile$FavConf
dogConf <<- weekFile$DogConf
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
premium <<- 16 - games
prem <<- FALSE
premiumPts <<- 0 + prem * premium
selectRows <<- (1:games)
selectRowsPrem <<- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
simOutcomes2 <<- (simOutcomes2[selectRows] <= winProb) * 1
rm(list = ls())
load("fansimsSkeleton.RData")
weekFilename = "2014week17.csv"
weekFile <- read.csv(weekFilename, stringsAsFactors = F, colClasses = c("character", "numeric", "integer",
"numeric", "numeric", "numeric", "numeric",
"character"))
weekFile <<- weekFile[order(-weekFile$Confidence),]
winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
games <<- length(winProb)
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <<- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <<- weekFile$FavConf
dogConf <<- weekFile$DogConf
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
premium <<- 16 - games
prem <<- FALSE
premiumPts <<- 0 + prem * premium
selectRows <<- (1:games)
selectRowsPrem <<- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem,  drop = F], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem,  drop = F], (1 - simOutcomes2)))
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simParams()
simulatePool(numFans = 100, payouts = c(225, 125, 50))
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simParams()
numFans = 100
payouts = c(225, 125, 50)
maxIter <- 2000
stratWins <- rep(0, 14)
stratPlace <- rep(0, 14)
stratShow <- rep(0, 14)
stratMatrix <- matrix(cbind(myPointsVector[resultIndex], upsetPointsMatrix[resultIndex,  drop = F]), nrow = maxIter)
rankMatrix <- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratMatrix <- matrix(cbind(myPointsVector[resultIndex], upsetPointsMatrix[resultIndex]), nrow = maxIter)
totalPointsMatrix = totalPointsIter
upsetPointsMatrix = upsetPoints
myPointsVector = myPoints
stratMatrix <- matrix(cbind(myPointsVector[resultIndex], upsetPointsMatrix[resultIndex]), nrow = maxIter)
rankMatrix <- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
totalPointsMatrix = totalPointsIter
rankMatrix <- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
myPointsVector[resultIndex]
upsetPointsMatrix[resultIndex,]
stratMatrix <- matrix(cbind(myPointsVector[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = maxIter)
rankMatrix <- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
warnings()
stratMatri
stratMatrix
simParams <- function(){
suppressMessages(require(foreach))
# resultIndex <<- sample(1:2000, maxiter, replace = TRUE)
fanIndex <<- foreach(resultIndex, .combine = rbind) %do% sample(1:2000, 250, replace = T)
rowMax <- 2000
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
}
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
genMtx()
simParams()
simulatePool(numFans = 100, payouts = c(225, 125, 50))
strategies[, topWin]
strategies[, topMoney]
favorites
processFile("2014week17.csv")
genMtx()
simParams()
simulatePool(numFans = 100, payouts = c(225, 125, 50))
strategies[, topWin]
strategies[, topMoney]
favorites
simulatePool(numFans = 250, payouts = c(225, 125, 50))
strategies[, topWin]
strategies[, topMoney]
favorites
load("useWeeklyFile.RData")
rm(list = ls())
library(shiny)
load("useWeeklyFile.RData")
gameRanks <- games:1
simulatePool(numFans = input$players, payouts = c(input$first, input$second, input$third))
shiny::runApp()
)
)
source('D:/Documents/GitHub/fs2/app.R')
load("useWeeklyFile.RData")
)
load("useWeeklyFile.RData")
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
strategies
strategies[, topWin]
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
library("xtable", lib.loc="~/R/win-library/3.1")
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
load("useWeeklyFile.RData")
gameRanks <- games:1
rm(totalPoints)
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
load("useWeeklyFile.RData")
rm(totalPoints)
gameRanks <- games:1
simulatePool()
M <- matrix(c(favorites, strategies[, topWin[1]], strategies[, topMoney[1]]),ncol=3)
colnames(M) <- c("Payout", "Frequency", "Favorites")
rownames(M) <- sapply(games:1L, paste0)
M
source('D:/Documents/GitHub/fs2/app.R')
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week17.csv")
genMtx()
simParams()
simulatePool(numFans = 250, payouts = c(225, 125, 50))
strategies[, topWin]
strategies[, topMoney]
favorites
rm(list = ls())
load("fansimsSkeleton.RData")
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week17.csv")
genMtx()
simParams()
simulatePool(numFans = 250, payouts = c(225, 125, 50))
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week17.csv")
genMtx()
simParams()
simulatePool(numFans = 250, payouts = c(225, 125, 50))
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week17.csv")
genMtx()
simParams()
simulatePool(numFans = 250, payouts = c(225, 125, 50))
strategies[, topWin]
strategies[, topMoney]
processFile("2014week15.csv")
genMtx()
simParams()
simulatePool(numFans = 250, payouts = c(225, 125, 50))
strategies[, topWin]
strategies[, topMoney]
favorites
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx()
simParams()
save.image("useWeeklyFile.RData")
simulatePool(numFans = 250, payouts = c(225, 125, 50))
topWin
topMoney
simulatePool(numFans = 2, payouts = c(225, 125, 50))
topWin
topMoney
strategies[, topWin]
strategies[, topMoney]
processFile("2014week14.csv")
games
genMtx()
simParams()
save.image("useWeeklyFile.RData")
simulatePool(numFans = 2, payouts = c(225, 125, 50))
topWin
topMoney
strategies[, topWin]
strategies[, topMoney]
favorites
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
load("useWeeklyFile.RData")
rm(totalPoints)
gameRanks <- games:1
myRanks <- rank(winProb, ties.method = "random")+premiumPts
reactive({myPoints <- as.vector(crossprod(myRanks, simOutcomes2[, 1:input$players]))}) # * myRanks
myPoints <- as.vector(crossprod(myRanks, simOutcomes2[, 1:input$players]))
input$players = 50
input <- cbind(players = 50, first = 100, second = 50, third = 25)
myPoints <- as.vector(crossprod(myRanks, simOutcomes2[, 1:input$players]))
input <- data.frame(players = 50, first = 100, second = 50, third = 25)
myPoints <- as.vector(crossprod(myRanks, simOutcomes2[, 1:input$players]))
myPoints <- as.vector(crossprod(myRanks, simOutcomes2))
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPoints[resultIndex,]), nrow = 2000)
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = 2000)
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPoints[resultIndex,]), nrow = 2000)
rankMatrix <- matrix(rep(0, 34000), ncol = 17)
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsIter[, 1:input$players])
stratWins <- colSums(rankMatrix[, 1:14] == 1)
stratPlace <- colSums(rankMatrix[, 1:14] == 2)
stratShow <- colSums(rankMatrix[, 1:14] == 3)
payouts <- c(0, 0, 0)
payouts <- c(input$first, input$second, input$third)
resultsMatrix <- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
winnings <- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
inTheMoney <- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
winnings
inTheMoney
colnames(winnings) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <- colnames(winnings)
topWin <- order(-winnings[1,])[1:3]
topMoney <- order(-inTheMoney)[1:3]
M <- matrix(c(favorites, strategies[, topWin[1]], strategies[, topMoney[1]]),ncol=3)
colnames(M) <- c("Payout", "Frequency", "Favorites")
rownames(M) <- sapply(games:1L, paste0)
M <- print(xtable(M, align=rep("c", ncol(M)+1)),
floating=FALSE, tabular.environment="array", comment=FALSE, print.results=FALSE, size = "huge")
html <- paste0("$$", M, "$$")
list(
withMathJax(HTML(html))
)
M
source('D:/Documents/GitHub/fs2/app.R')
source('D:/Documents/GitHub/fs2/app.R')
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week14.csv")
games
genMtx()
simParams()
save.image("useWeeklyFile.RData")
rm(totalPoints)
gameRanks <- games:1
myRanks <- rank(winProb, ties.method = "random")+premiumPts
myPoints <- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPoints[resultIndex,]), nrow = resultIndex)
myPoints[resultIndex]
length(resultIndex)
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPoints[resultIndex,]), nrow = length(resultIndex))
rankMatrix <- matrix(rep(0, 34000), ncol = 17)
rankMatrix <<- apply(stratMatrix[, 1:input$players], 2, rankVinM_Q, pointsMtrx = totalPointsIter[, 1:input$players])
input <- data.frame(players = 50, first = 100, second = 50, third = 25)
rankMatrix <<- apply(stratMatrix[, 1:input$players], 2, rankVinM_Q, pointsMtrx = totalPointsIter[, 1:input$players])
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsIter[, 1:input$players])
stratWins <- colSums(rankMatrix[, 1:14] == 1)
stratPlace <- colSums(rankMatrix[, 1:14] == 2)
stratShow <- colSums(rankMatrix[, 1:14] == 3)
payouts <- c(0, 0, 0)
payouts <- c(input$first, input$second, input$third)
resultsMatrix <- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
winnings <- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
inTheMoney <- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
inTheMoney <- round(rowSums((resultsMatrix %*% (1*(payouts > 0))) > 0), 2)
resultsMatrix
(1*(payouts > 0))
inTheMoney <- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
colnames(winnings) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <- colnames(winnings)
topWin <- order(-winnings[1,])[1:3]
topMoney <- order(-inTheMoney)[1:3]
M <- matrix(c(favorites, strategies[, topWin[1]], strategies[, topMoney[1]]),ncol=3)
colnames(M) <- c("Payout", "Frequency", "Favorites")
rownames(M) <- sapply(games:1L, paste0)
M <- print(xtable(M, align=rep("c", ncol(M)+1)),
floating=FALSE, tabular.environment="array", comment=FALSE, print.results=FALSE, size = "huge")
html <- paste0("$$", M, "$$")
list(
withMathJax(HTML(html))
)
source('D:/Documents/GitHub/fs2/app.R')
M <- matrix(c(favorites, strategies[, topWin[1]], strategies[, topMoney[1]]),ncol=3)
colnames(M) <- c("Payout", "Frequency", "Favorites")
rownames(M) <- sapply(games:1L, paste0)
M
input <- data.frame(players = 250, first = 100, second = 0, third = 0)
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsIter[, 1:input$players])
stratWins <- colSums(rankMatrix[, 1:14] == 1)
stratPlace <- colSums(rankMatrix[, 1:14] == 2)
stratShow <- colSums(rankMatrix[, 1:14] == 3)
payouts <- c(input$first, input$second, input$third)
resultsMatrix <- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
winnings <- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
inTheMoney <- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
colnames(winnings) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <- colnames(winnings)
topWin <- order(-winnings[1,])[1:3]
topMoney <- order(-inTheMoney)[1:3]
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week16.csv")
# games
genMtx()
simParams()
save.image("useWeeklyFile.RData")
rm(totalPoints)
gameRanks <- games:1
myRanks <- rank(winProb, ties.method = "random")+premiumPts
myPoints <- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPoints[resultIndex,]), nrow = length(resultIndex))
rankMatrix <- matrix(rep(0, 34000), ncol = 17)
input <- data.frame(players = 250, first = 100, second = 0, third = 0)
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsIter[, 1:input$players])
stratWins <- colSums(rankMatrix[, 1:14] == 1)
stratPlace <- colSums(rankMatrix[, 1:14] == 2)
stratShow <- colSums(rankMatrix[, 1:14] == 3)
payouts <- c(0, 0, 0)
payouts <- c(input$first, input$second, input$third)
resultsMatrix <- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
winnings <- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
inTheMoney <- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
colnames(winnings) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <- colnames(winnings)
topWin <- order(-winnings[1,])[1:3]
topMoney <- order(-inTheMoney)[1:3]
M <- matrix(c(favorites, strategies[, topWin[1]], strategies[, topMoney[1]]),ncol=3)
colnames(M) <- c("Payout", "Frequency", "Favorites")
rownames(M) <- sapply(games:1L, paste0)
M
