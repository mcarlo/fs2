winProb <<- weekFile[, 2]
if (max(winProb) > 1) {winProb <<- winProb/100.0}
favorites <<- weekFile$Victor
strategies <<- matrix(rep(favorites, 14), ncol = 14)
# simulate whether fans pick the favorite
fanProb <<- weekFile$FanProb
# simulate favorite confidence and underdog confidence
favConf <<- weekFile$FavConf
dogConf <<- weekFile$DogConf
oppLabel <- function(c){paste0(c, "'s opponent")}
dogs <<- sapply(favorites, oppLabel)
if(dim(weekFile)[2] == 8) {dogs <<- weekFile$Underdog}
#save.image("procFile.RData")
### dependent matrices
}
assignPoolPoints <- function(numFans){
poolPoints <<- totalPointsIter[, 1:numFans]
}
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
genMtx <- function(){
#rm(list = ls())
#load("procFile.RData")
#games <<- length(winProb)
premium <<- 16 - games
prem <<- FALSE
premiumPts <<- 0 + prem * premium
selectRows <<- (1:games)
selectRowsPrem <<- selectRows + (1 - prem) * premium
for (j in 2:14){ # j = 2
strategies[j - 1, j] <<- dogs[j-1] #weekFile[1:3, ]; favorites[j]
strategies[, j] <<- strategies[order(-(upsetMatrix[selectRowsPrem, selectRowsPrem] + upsetDiagMatrix[selectRowsPrem, selectRowsPrem])[ , j - 1]), j]
}
#strategies <<- strategies
simPicks <- matrix((simplayerCols[selectRows]  < fanProb)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games], games, (favConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
# simFavs[1:10, 1:10]
simDogs <- matrix(qbinom(simRand[1:games], games, (dogConf - .5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
#rm(simplayerCols); rm(simRand)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
simRanks <- apply(simRaw[selectRows,], 2, rank) + premiumPts # max(apply(simRanks, 2, max))
#rm(simRaw); rm(simPrior); rm(simFavs); rm(simDogs)
simOutcomes2 <<- (simOutcomes2[selectRows,] <= winProb) * 1
totalPoints <<- t(crossprod((simPicks * simRanks), simOutcomes2) +
crossprod((1 - simPicks) * simRanks, (1 - simOutcomes2)))
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- calcPoints(myRanks)
upsetPoints <<- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem,  drop = F], simOutcomes2) +
crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem,  drop = F], (1 - simOutcomes2)))
stratMatrix <<- matrix(cbind(myPoints[resultIndex], upsetPoints[resultIndex,]), nrow = 2000)
}
# cmpMtx <- cmpfun(genMtx)
simParams <- function(){
suppressMessages(require(foreach))
maxIter <<- 2000
set.seed(123)
# resultIndex <<- sample(1:2000, maxiter, replace = TRUE)
fanIndex <<- matrix(as.numeric(foreach(resultIndex, .combine = rbind) %do% as.numeric(sample(1:playerCols, 250, replace = T))), nrow = 2000)
rowMax <<- 2000
stratWins <<- rep(0, 14)
stratPlace <<- rep(0, 14)
stratShow <<- rep(0, 14)
#   myRanks <<- rank(winProb, ties.method = "random")+premiumPts
#   myPoints <<- calcPoints(myRanks)
#
#   upsetPointsMatrix <<- apply(upsetPoints, 2, calcPoints) + apply(upsetPoints, 2, calcPoints, outcomeMatrix = 1 - simOutcomes2)
#   stratMatrix <<- matrix(cbind(myPoints[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = 2000)
}
rankVinM_Q <- function(vec = myPoints[resultIndex], pointsMtrx){
temp <- -matrix(cbind(vec, pointsMtrx), ncol = dim(pointsMtrx)[2] + 1)
rankM <- t(apply(temp, 1, rank, ties.method = "min"))[, 1]
rankM
}
littleSim <- function(numFans = 250, totalPointsMatrix = totalPointsIter,
upsetPointsMatrix = upsetPoints){# myPointsVector = myPoints){ #numFans = 25
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
totalPointsMatrix <- totalPointsIter[, 1:numFans] #totalPointsMatrix[1:10,]
#   upsetPointsMatrix <- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem,  drop = F], simOutcomes2) +
#                       crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem,  drop = F], (1 - simOutcomes2)))
#
#   myRanks <<- rank(winProb, ties.method = "random")+premiumPts
#
#   myPoints <- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
#   stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = 2000)
#
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
#rankMatrix[1:10, 1]
#myPoints[1:10]; favorites; winProb
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
#  resultsMatrix
}
computeWinnings <- function(resultsMatrix, payouts = c(100, 0, 0)) {
winnings <- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
colnames(winnings) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <- colnames(winnings)
winnings
}
countITM <- function(resultsMatrix, payouts = c(100, 0, 0)) {
inTheMoney <- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
inTheMoney
}
simulatePool <- function(numFans = 100,
payouts = c(100, 0, 0), totalPointsMatrix = totalPointsIter[, 1:numFans],
myPointsVector = myPoints, upsetPointsMatrix = upsetPoints){
myRanks <<- rank(winProb, ties.method = "random")+premiumPts
myPoints <<- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = 2000)
rankMatrix <- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <- colSums(rankMatrix[, 1:14] == 1)
stratPlace <- colSums(rankMatrix[, 1:14] == 2)
stratShow <- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
winnings <<- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
inTheMoney <<- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
colnames(winnings) <<- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <<- colnames(winnings)
#   top3Money()
#   top3Dollars()
topWin <<- order(-winnings[1,])[1:3]
topMoney <<- order(-inTheMoney)[1:3]
#print(resultsMatrix)
#   print(rbind(round(winnings, 2), round(apply(resultsMatrix, 1, sum), 1)))
}
simulateOld <- function(maxIter = 2000, numFans = 90,
payouts = c(100, 0, 0), totalPointsMatrix = totalPointsIter,
myPointsVector = myPoints, upsetPointsMatrix = upsetPoints){
stratWins <- rep(0, 14)
stratPlace <- rep(0, 14)
stratShow <- rep(0, 14)
stratMatrix <- matrix(cbind(myPointsVector[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = maxIter)
rankMatrix <- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <- colSums(rankMatrix[, 1:14] == 1)
stratPlace <- colSums(rankMatrix[, 1:14] == 2)
stratShow <- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
winnings <<- round(as.data.frame(t((resultsMatrix %*% payouts))), 1)
inTheMoney <<- round(rowSums(resultsMatrix %*% (1*(payouts > 0))), 2)
colnames(winnings) <<- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(resultsMatrix) <<- colnames(winnings)
#print(resultsMatrix)
#   print(rbind(round(winnings, 2), round(apply(resultsMatrix, 1, sum), 1)))
#   cat(paste0("maxIterations = ", maxIter))
}
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim(numFans = 250)
save.image("useWeeklyFile.RData")
rm(list = ls())
load("useWeeklyFile.RData")
input <- data.frame(players = 250, first = 225, second = 125, third = 50)
results <- littleSim(numFans = input$players)
winDollars <- round(as.data.frame(t((results %*% c(input$first, input$second, input$third)))), 1)
colnames(winDollars) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(results) <- colnames(winDollars)
topWin <- strategies[,order(-winDollars[1,])[1:3]]
inTheMoney <- round(rowSums(results %*% (1*(c(input$first, input$second, input$third) > 0))), 2)
topMoney <- strategies[,order(-inTheMoney)[1:3]]
data <- as.data.frame(cbind(gameRanks, favorites, topWin, topMoney))
colnames(data) <- c("Confidence", "Favorites", "Top $", "2nd $", "3rd $", "Most Top3", "2nd Top3", "3rd Top3")
data
shiny::runApp()
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
rm(list = ls())
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim(numFans = 250)
# rankMatrix <- littleSim(numFans = 250, totalPointsMatrix = totalPointsIter,
#                       upsetPointsMatrix = upsetPoints)
save.image("useWeeklyFile.RData")
results
rm(list = ls())
load("useWeeklyFile.RData")
calcWinners <- funcion(numberFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
#   upsetPointsMatrix <- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem,  drop = F], simOutcomes2) +
#                       crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem,  drop = F], (1 - simOutcomes2)))
#
#   myRanks <<- rank(winProb, ties.method = "random")+premiumPts
#
#   myPoints <- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
#   stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = 2000)
#
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
#rankMatrix[1:10, 1]
#myPoints[1:10]; favorites; winProb
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
calcWinners <- funcion(numberFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
#   upsetPointsMatrix <- t(crossprod(upsetMatrix[selectRowsPrem,selectRowsPrem,  drop = F], simOutcomes2) +
#                       crossprod(upsetDiagMatrix[selectRowsPrem,selectRowsPrem,  drop = F], (1 - simOutcomes2)))
#
#   myRanks <<- rank(winProb, ties.method = "random")+premiumPts
#
#   myPoints <- as.vector(crossprod(myRanks, simOutcomes2)) # * myRanks
#   stratMatrix <- matrix(cbind(myPoints[resultIndex], upsetPointsMatrix[resultIndex,]), nrow = 2000)
#
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
#rankMatrix[1:10, 1]
#myPoints[1:10]; favorites; winProb
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
calcWinners <- funcion(numberFans = numFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
littleSim <- function(numFans = 250, totalPointsMatrix = totalPointsIter,
upsetPointsMatrix = upsetPoints){# myPointsVector = myPoints){ #numFans = 25
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
totalPointsIter
}
calcWinners <- funcion(numberFans = numFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
littleSim(250)
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
numberFans = numFans
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim(numFans = 250)
littleSim <- function(numFans = 250) #, totalPointsMatrix = totalPointsIter,
#upsetPointsMatrix = upsetPoints){# myPointsVector = myPoints){ #numFans = 25
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
totalPointsIter
} #littleSim(250)
littleSim <- function(numFans = 250) #, totalPointsMatrix = totalPointsIter,
#upsetPointsMatrix = upsetPoints){# myPointsVector = myPoints){ #numFans = 25
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
#totalPointsIter
}
littleSim <- function(numFans = 250) { #, totalPointsMatrix = totalPointsIter,
#upsetPointsMatrix = upsetPoints){# myPointsVector = myPoints){ #numFans = 25
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
#totalPointsIter
} #littleSim(250)
calcWinners <- funcion(numberFans = numFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
calcWinners <- function(numberFans = numFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim(250)
calcWinners()
calcWinners(250)
calcWinners(25)
calcWinners(5)
littleSim <- function() { #, totalPointsMatrix = totalPointsIter,
#upsetPointsMatrix = upsetPoints){# myPointsVector = myPoints){ #numFans = 25
totalPointsIter <<- matrix(foreach(i = 1:rowMax, .combine = rbind) %do%
# i = 1
totalPoints[resultIndex[i], fanIndex[i,]], nrow = rowMax, ncol = 250)
#totalPointsIter
} #littleSim(250)
calcWinners <- function(numberFans = numFans){
totalPointsMatrix <- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
calcWinners(24)
calcWinners(240)
rankVinM_Q <- function(vec, pointsMtrx){
temp <- -matrix(cbind(vec, pointsMtrx), ncol = dim(pointsMtrx)[2] + 1)
rankM <- t(apply(temp, 1, rank, ties.method = "min"))[, 1]
rankM
}
calcWinners <- function(numberFans = numFans){
totalPointsMatrix <<- totalPointsIter[, 1:numberFans] #totalPointsMatrix[1:10,]
rankMatrix <<- apply(stratMatrix, 2, rankVinM_Q, pointsMtrx = totalPointsMatrix)
stratWins <<- colSums(rankMatrix[, 1:14] == 1)
stratPlace <<- colSums(rankMatrix[, 1:14] == 2)
stratShow <<- colSums(rankMatrix[, 1:14] == 3)
resultsMatrix <<- as.matrix(cbind(stratWins, stratPlace, stratShow), nrow = 6, ncol = 3) * 17.0 / maxIter
resultsMatrix
}
calcWinners(24)
calcWinners(240)
calcWinners(2)
rankVinM_Q(myPoints[resultIndex], pointsMtrx = totalPointsMatrix)
17 * mean(rankVinM_Q(myPoints[resultIndex], pointsMtrx = totalPointsMatrix) == 1)
calcWinners(240)
17 * mean(rankVinM_Q(myPoints[resultIndex], pointsMtrx = totalPointsMatrix) == 1)
rankVinM_Q
summary(rankVinM_Q(myPoints[resultIndex], pointsMtrx = totalPointsMatrix))
resultIndex[1]
myPoints[1464]
hist(totalPointsMatrix[1464,])
simOutcomes2[, 1464]
min(totalPointsMatrix[1464,])
max(totalPointsMatrix[1464,])
fanProb
rm(list= ls())
playerCols = 500
games = 16
weekseed = 1
# simulate placeholder
simRaw <- matrix(rep(0,playerCols*games), nrow = games, ncol = playerCols)
upsetDiagMatrix <<- matrix(rep(0, games * games), nrow = games,
ncol = games)
diag(upsetDiagMatrix) <- games
upsetMatrix <<- matrix(rep((games:1), games, times = games),
nrow = games, ncol = games)
diag(upsetMatrix) <- 0
for (j in 2:games){
upsetMatrix[1:(j-1), j] <- (games - 1):
(games - j + 1)
}
set.seed(weekseed) #as.numeric(Sys.time()))
simplayerCols <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simPicks <- simplayerCols * 0
simRand <- matrix(runif(games*playerCols), nrow = games, ncol = playerCols)
simOutcomes2 <- matrix(runif(16 * 2000), ncol = 2000)
simPicks <- matrix((simplayerCols < .5)*1, nrow = games, ncol = playerCols)
simFavs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simDogs <- matrix(qbinom(simRand[1:games,], games, (.5)/games, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simPrior <- matrix(qbinom(simRand[1:games,], games, 0.5, lower.tail = T), nrow = games, ncol = playerCols) + (runif(playerCols * games) - .5)
simRaw <- (simPrior + simFavs *simPicks + simDogs *(1 - simPicks))/2
fanIndex <- sample(1:playerCols, playerCols, replace = T)
resultIndex <<- sample(1:2000, 2000, replace = TRUE)
save.image("fansimsSkeleton.RData")
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
calcWinners(5)
# calcWinners(50)
calcWinners(50)
calcWinners(250)
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
fanProb
mean(simpicks[15,])
mean(simPicks[15,])
mean(simPicks[16,])
mean(simPicks[1,])
mean(simPicks[2,])
mean(simPicks[3,])
rowMeans(simPicks)
simplayerCols[, 1:10]
simplayerCols[, 1:10] <- fanProb
rm(list = ls())
load("useWeeklyFile.RData")
simplayerCols[, 1:10] < fanProb
rowMeans(simplayerCols[, ] < fanProb)
rowMeans(simPicks)
selectRows
rowMeans(simplayerCols[selectRows, ] < fanProb)
rowMeans(matrix(simplayerCols[selectRows, ] < fanProb, nrow = games)
rowMeans(matrix(simplayerCols[selectRows, ] < fanProb, nrow = games)
)
rowMeans(simPicks)
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
calcWinners(250)
calcWinners(25)
calcWinners(2)
rowMeans(simPicks)
fanProb
simPicks[, 1:10]
rm(list = ls())
load("fansimsSkeleton.RData")
rowMeans(simPicks)
source("data_to_load.R") #getwd()
rowMeans(simPicks)
processFile("2014week15.csv")
rowMeans(simPicks)
genMtx() #strategies
rowMeans(simPicks)
rowMeans((simplayerCols[selectRows]  < fanProb))
rowMeans(simplayerCols[selectRows]  )
rowMeans(simplayerCols[selectRows,]  )
rm(list = ls())
load("fansimsSkeleton.RData")
source("data_to_load.R") #getwd()
processFile("2014week15.csv")
genMtx() #strategies
rowMeans(simPicks)
simParams()
littleSim()
calcWinners(2)
calcWinners(25)
calcWinners(250)
save.image("useWeeklyFile.RData")
rm(list = ls())
load("useWeeklyFile.RData")
input <- data.frame(players = 250, first = 225, second = 125, third = 50)
results <- littleSim(numFans = input$players)
winDollars <- round(as.data.frame(t((results %*% c(input$first, input$second, input$third)))), 1)
results <- littleSim()
winDollars <- round(as.data.frame(t((results %*% c(input$first, input$second, input$third)))), 1)
colnames(winDollars) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(results) <- colnames(winDollars)
topWin <- strategies[,order(-winDollars[1,])[1:3]]
results
results <- calcWinners(input$players)
winDollars <- round(as.data.frame(t((results %*% c(input$first, input$second, input$third)))), 1)
colnames(winDollars) <- c("WTP", "Fav", "Fav-1", "Fav-2", "Fav-3", "Fav-4",
"Fav-5", "Fav-6", "Fav-7", "Fav-8", "Fav-9",
"Fav-10", "Fav-11", "Fav-12")
rownames(results) <- colnames(winDollars)
topWin <- strategies[,order(-winDollars[1,])[1:3]]
inTheMoney <- round(rowSums(results %*% (1*(c(input$first, input$second, input$third) > 0))), 2)
topMoney <- strategies[,order(-inTheMoney)[1:3]]
data <- as.data.frame(cbind(gameRanks, favorites, topWin, topMoney))
colnames(data) <- c("Confidence", "Favorites", "Top $", "2nd $", "3rd $", "Most Top3", "2nd Top3", "3rd Top3")
data
shiny::runApp()
